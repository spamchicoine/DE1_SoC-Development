// system_acl_iface_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system_acl_iface_mm_interconnect_3 (
		input  wire        config_clk_out_clk_clk,                                 //                               config_clk_out_clk.clk
		input  wire        D5M_Subsystem_sys_reset_reset_bridge_in_reset_reset,    //    D5M_Subsystem_sys_reset_reset_bridge_in_reset.reset
		input  wire        pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset, // pipe_stage_host_ctrl_reset_reset_bridge_in_reset.reset
		input  wire [15:0] pipe_stage_host_ctrl_m0_address,                        //                          pipe_stage_host_ctrl_m0.address
		output wire        pipe_stage_host_ctrl_m0_waitrequest,                    //                                                 .waitrequest
		input  wire [0:0]  pipe_stage_host_ctrl_m0_burstcount,                     //                                                 .burstcount
		input  wire [3:0]  pipe_stage_host_ctrl_m0_byteenable,                     //                                                 .byteenable
		input  wire        pipe_stage_host_ctrl_m0_read,                           //                                                 .read
		output wire [31:0] pipe_stage_host_ctrl_m0_readdata,                       //                                                 .readdata
		output wire        pipe_stage_host_ctrl_m0_readdatavalid,                  //                                                 .readdatavalid
		input  wire        pipe_stage_host_ctrl_m0_write,                          //                                                 .write
		input  wire [31:0] pipe_stage_host_ctrl_m0_writedata,                      //                                                 .writedata
		input  wire        pipe_stage_host_ctrl_m0_debugaccess,                    //                                                 .debugaccess
		input  wire [1:0]  Pixel_DMA_Addr_Translation_master_address,              //                Pixel_DMA_Addr_Translation_master.address
		output wire        Pixel_DMA_Addr_Translation_master_waitrequest,          //                                                 .waitrequest
		input  wire [3:0]  Pixel_DMA_Addr_Translation_master_byteenable,           //                                                 .byteenable
		input  wire        Pixel_DMA_Addr_Translation_master_read,                 //                                                 .read
		output wire [31:0] Pixel_DMA_Addr_Translation_master_readdata,             //                                                 .readdata
		input  wire        Pixel_DMA_Addr_Translation_master_write,                //                                                 .write
		input  wire [31:0] Pixel_DMA_Addr_Translation_master_writedata,            //                                                 .writedata
		input  wire [1:0]  Video_In_DMA_Addr_Translation_master_address,           //             Video_In_DMA_Addr_Translation_master.address
		output wire        Video_In_DMA_Addr_Translation_master_waitrequest,       //                                                 .waitrequest
		input  wire [3:0]  Video_In_DMA_Addr_Translation_master_byteenable,        //                                                 .byteenable
		input  wire        Video_In_DMA_Addr_Translation_master_read,              //                                                 .read
		output wire [31:0] Video_In_DMA_Addr_Translation_master_readdata,          //                                                 .readdata
		input  wire        Video_In_DMA_Addr_Translation_master_write,             //                                                 .write
		input  wire [31:0] Video_In_DMA_Addr_Translation_master_writedata,         //                                                 .writedata
		output wire [13:0] acl_kernel_interface_ctrl_address,                      //                        acl_kernel_interface_ctrl.address
		output wire        acl_kernel_interface_ctrl_write,                        //                                                 .write
		output wire        acl_kernel_interface_ctrl_read,                         //                                                 .read
		input  wire [31:0] acl_kernel_interface_ctrl_readdata,                     //                                                 .readdata
		output wire [31:0] acl_kernel_interface_ctrl_writedata,                    //                                                 .writedata
		output wire [0:0]  acl_kernel_interface_ctrl_burstcount,                   //                                                 .burstcount
		output wire [3:0]  acl_kernel_interface_ctrl_byteenable,                   //                                                 .byteenable
		input  wire        acl_kernel_interface_ctrl_readdatavalid,                //                                                 .readdatavalid
		input  wire        acl_kernel_interface_ctrl_waitrequest,                  //                                                 .waitrequest
		output wire        acl_kernel_interface_ctrl_debugaccess,                  //                                                 .debugaccess
		output wire [2:0]  ADC_adc_slave_address,                                  //                                    ADC_adc_slave.address
		output wire        ADC_adc_slave_write,                                    //                                                 .write
		output wire        ADC_adc_slave_read,                                     //                                                 .read
		input  wire [31:0] ADC_adc_slave_readdata,                                 //                                                 .readdata
		output wire [31:0] ADC_adc_slave_writedata,                                //                                                 .writedata
		input  wire        ADC_adc_slave_waitrequest,                              //                                                 .waitrequest
		output wire [1:0]  AV_Config_avalon_av_config_slave_address,               //                 AV_Config_avalon_av_config_slave.address
		output wire        AV_Config_avalon_av_config_slave_write,                 //                                                 .write
		output wire        AV_Config_avalon_av_config_slave_read,                  //                                                 .read
		input  wire [31:0] AV_Config_avalon_av_config_slave_readdata,              //                                                 .readdata
		output wire [31:0] AV_Config_avalon_av_config_slave_writedata,             //                                                 .writedata
		output wire [3:0]  AV_Config_avalon_av_config_slave_byteenable,            //                                                 .byteenable
		input  wire        AV_Config_avalon_av_config_slave_waitrequest,           //                                                 .waitrequest
		output wire [1:0]  D5M_Subsystem_avalon_d5m_config_slave_address,          //            D5M_Subsystem_avalon_d5m_config_slave.address
		output wire        D5M_Subsystem_avalon_d5m_config_slave_write,            //                                                 .write
		output wire        D5M_Subsystem_avalon_d5m_config_slave_read,             //                                                 .read
		input  wire [31:0] D5M_Subsystem_avalon_d5m_config_slave_readdata,         //                                                 .readdata
		output wire [31:0] D5M_Subsystem_avalon_d5m_config_slave_writedata,        //                                                 .writedata
		output wire [3:0]  D5M_Subsystem_avalon_d5m_config_slave_byteenable,       //                                                 .byteenable
		input  wire        D5M_Subsystem_avalon_d5m_config_slave_waitrequest,      //                                                 .waitrequest
		output wire [1:0]  D5M_Subsystem_video_in_dma_control_slave_address,       //         D5M_Subsystem_video_in_dma_control_slave.address
		output wire        D5M_Subsystem_video_in_dma_control_slave_write,         //                                                 .write
		output wire        D5M_Subsystem_video_in_dma_control_slave_read,          //                                                 .read
		input  wire [31:0] D5M_Subsystem_video_in_dma_control_slave_readdata,      //                                                 .readdata
		output wire [31:0] D5M_Subsystem_video_in_dma_control_slave_writedata,     //                                                 .writedata
		output wire [3:0]  D5M_Subsystem_video_in_dma_control_slave_byteenable,    //                                                 .byteenable
		output wire [1:0]  led_s1_address,                                         //                                           led_s1.address
		output wire        led_s1_write,                                           //                                                 .write
		input  wire [31:0] led_s1_readdata,                                        //                                                 .readdata
		output wire [31:0] led_s1_writedata,                                       //                                                 .writedata
		output wire        led_s1_chipselect,                                      //                                                 .chipselect
		output wire [1:0]  Pixel_DMA_Addr_Translation_slave_address,               //                 Pixel_DMA_Addr_Translation_slave.address
		output wire        Pixel_DMA_Addr_Translation_slave_write,                 //                                                 .write
		output wire        Pixel_DMA_Addr_Translation_slave_read,                  //                                                 .read
		input  wire [31:0] Pixel_DMA_Addr_Translation_slave_readdata,              //                                                 .readdata
		output wire [31:0] Pixel_DMA_Addr_Translation_slave_writedata,             //                                                 .writedata
		output wire [3:0]  Pixel_DMA_Addr_Translation_slave_byteenable,            //                                                 .byteenable
		input  wire        Pixel_DMA_Addr_Translation_slave_waitrequest,           //                                                 .waitrequest
		output wire [1:0]  Pushbuttons_s1_address,                                 //                                   Pushbuttons_s1.address
		output wire        Pushbuttons_s1_write,                                   //                                                 .write
		input  wire [31:0] Pushbuttons_s1_readdata,                                //                                                 .readdata
		output wire [31:0] Pushbuttons_s1_writedata,                               //                                                 .writedata
		output wire        Pushbuttons_s1_chipselect,                              //                                                 .chipselect
		output wire        version_id_s_read,                                      //                                     version_id_s.read
		input  wire [31:0] version_id_s_readdata,                                  //                                                 .readdata
		output wire [1:0]  VGA_Subsystem_pixel_dma_control_slave_address,          //            VGA_Subsystem_pixel_dma_control_slave.address
		output wire        VGA_Subsystem_pixel_dma_control_slave_write,            //                                                 .write
		output wire        VGA_Subsystem_pixel_dma_control_slave_read,             //                                                 .read
		input  wire [31:0] VGA_Subsystem_pixel_dma_control_slave_readdata,         //                                                 .readdata
		output wire [31:0] VGA_Subsystem_pixel_dma_control_slave_writedata,        //                                                 .writedata
		output wire [3:0]  VGA_Subsystem_pixel_dma_control_slave_byteenable,       //                                                 .byteenable
		output wire [1:0]  Video_In_DMA_Addr_Translation_slave_address,            //              Video_In_DMA_Addr_Translation_slave.address
		output wire        Video_In_DMA_Addr_Translation_slave_write,              //                                                 .write
		output wire        Video_In_DMA_Addr_Translation_slave_read,               //                                                 .read
		input  wire [31:0] Video_In_DMA_Addr_Translation_slave_readdata,           //                                                 .readdata
		output wire [31:0] Video_In_DMA_Addr_Translation_slave_writedata,          //                                                 .writedata
		output wire [3:0]  Video_In_DMA_Addr_Translation_slave_byteenable,         //                                                 .byteenable
		input  wire        Video_In_DMA_Addr_Translation_slave_waitrequest         //                                                 .waitrequest
	);

	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest;                // pipe_stage_host_ctrl_m0_agent:av_waitrequest -> pipe_stage_host_ctrl_m0_translator:uav_waitrequest
	wire  [31:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata;                   // pipe_stage_host_ctrl_m0_agent:av_readdata -> pipe_stage_host_ctrl_m0_translator:uav_readdata
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess;                // pipe_stage_host_ctrl_m0_translator:uav_debugaccess -> pipe_stage_host_ctrl_m0_agent:av_debugaccess
	wire  [15:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address;                    // pipe_stage_host_ctrl_m0_translator:uav_address -> pipe_stage_host_ctrl_m0_agent:av_address
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read;                       // pipe_stage_host_ctrl_m0_translator:uav_read -> pipe_stage_host_ctrl_m0_agent:av_read
	wire   [3:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable;                 // pipe_stage_host_ctrl_m0_translator:uav_byteenable -> pipe_stage_host_ctrl_m0_agent:av_byteenable
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid;              // pipe_stage_host_ctrl_m0_agent:av_readdatavalid -> pipe_stage_host_ctrl_m0_translator:uav_readdatavalid
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock;                       // pipe_stage_host_ctrl_m0_translator:uav_lock -> pipe_stage_host_ctrl_m0_agent:av_lock
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write;                      // pipe_stage_host_ctrl_m0_translator:uav_write -> pipe_stage_host_ctrl_m0_agent:av_write
	wire  [31:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata;                  // pipe_stage_host_ctrl_m0_translator:uav_writedata -> pipe_stage_host_ctrl_m0_agent:av_writedata
	wire   [2:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount;                 // pipe_stage_host_ctrl_m0_translator:uav_burstcount -> pipe_stage_host_ctrl_m0_agent:av_burstcount
	wire         video_in_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest;   // Video_In_DMA_Addr_Translation_master_agent:av_waitrequest -> Video_In_DMA_Addr_Translation_master_translator:uav_waitrequest
	wire  [31:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdata;      // Video_In_DMA_Addr_Translation_master_agent:av_readdata -> Video_In_DMA_Addr_Translation_master_translator:uav_readdata
	wire         video_in_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess;   // Video_In_DMA_Addr_Translation_master_translator:uav_debugaccess -> Video_In_DMA_Addr_Translation_master_agent:av_debugaccess
	wire  [15:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_address;       // Video_In_DMA_Addr_Translation_master_translator:uav_address -> Video_In_DMA_Addr_Translation_master_agent:av_address
	wire         video_in_dma_addr_translation_master_translator_avalon_universal_master_0_read;          // Video_In_DMA_Addr_Translation_master_translator:uav_read -> Video_In_DMA_Addr_Translation_master_agent:av_read
	wire   [3:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable;    // Video_In_DMA_Addr_Translation_master_translator:uav_byteenable -> Video_In_DMA_Addr_Translation_master_agent:av_byteenable
	wire         video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid; // Video_In_DMA_Addr_Translation_master_agent:av_readdatavalid -> Video_In_DMA_Addr_Translation_master_translator:uav_readdatavalid
	wire         video_in_dma_addr_translation_master_translator_avalon_universal_master_0_lock;          // Video_In_DMA_Addr_Translation_master_translator:uav_lock -> Video_In_DMA_Addr_Translation_master_agent:av_lock
	wire         video_in_dma_addr_translation_master_translator_avalon_universal_master_0_write;         // Video_In_DMA_Addr_Translation_master_translator:uav_write -> Video_In_DMA_Addr_Translation_master_agent:av_write
	wire  [31:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_writedata;     // Video_In_DMA_Addr_Translation_master_translator:uav_writedata -> Video_In_DMA_Addr_Translation_master_agent:av_writedata
	wire   [2:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount;    // Video_In_DMA_Addr_Translation_master_translator:uav_burstcount -> Video_In_DMA_Addr_Translation_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                                   // rsp_mux_001:src_valid -> Video_In_DMA_Addr_Translation_master_agent:rp_valid
	wire  [91:0] rsp_mux_001_src_data;                                                                    // rsp_mux_001:src_data -> Video_In_DMA_Addr_Translation_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                                   // Video_In_DMA_Addr_Translation_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire  [10:0] rsp_mux_001_src_channel;                                                                 // rsp_mux_001:src_channel -> Video_In_DMA_Addr_Translation_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                           // rsp_mux_001:src_startofpacket -> Video_In_DMA_Addr_Translation_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                             // rsp_mux_001:src_endofpacket -> Video_In_DMA_Addr_Translation_master_agent:rp_endofpacket
	wire         pixel_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest;      // Pixel_DMA_Addr_Translation_master_agent:av_waitrequest -> Pixel_DMA_Addr_Translation_master_translator:uav_waitrequest
	wire  [31:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdata;         // Pixel_DMA_Addr_Translation_master_agent:av_readdata -> Pixel_DMA_Addr_Translation_master_translator:uav_readdata
	wire         pixel_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess;      // Pixel_DMA_Addr_Translation_master_translator:uav_debugaccess -> Pixel_DMA_Addr_Translation_master_agent:av_debugaccess
	wire  [15:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_address;          // Pixel_DMA_Addr_Translation_master_translator:uav_address -> Pixel_DMA_Addr_Translation_master_agent:av_address
	wire         pixel_dma_addr_translation_master_translator_avalon_universal_master_0_read;             // Pixel_DMA_Addr_Translation_master_translator:uav_read -> Pixel_DMA_Addr_Translation_master_agent:av_read
	wire   [3:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable;       // Pixel_DMA_Addr_Translation_master_translator:uav_byteenable -> Pixel_DMA_Addr_Translation_master_agent:av_byteenable
	wire         pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid;    // Pixel_DMA_Addr_Translation_master_agent:av_readdatavalid -> Pixel_DMA_Addr_Translation_master_translator:uav_readdatavalid
	wire         pixel_dma_addr_translation_master_translator_avalon_universal_master_0_lock;             // Pixel_DMA_Addr_Translation_master_translator:uav_lock -> Pixel_DMA_Addr_Translation_master_agent:av_lock
	wire         pixel_dma_addr_translation_master_translator_avalon_universal_master_0_write;            // Pixel_DMA_Addr_Translation_master_translator:uav_write -> Pixel_DMA_Addr_Translation_master_agent:av_write
	wire  [31:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_writedata;        // Pixel_DMA_Addr_Translation_master_translator:uav_writedata -> Pixel_DMA_Addr_Translation_master_agent:av_writedata
	wire   [2:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount;       // Pixel_DMA_Addr_Translation_master_translator:uav_burstcount -> Pixel_DMA_Addr_Translation_master_agent:av_burstcount
	wire         rsp_mux_002_src_valid;                                                                   // rsp_mux_002:src_valid -> Pixel_DMA_Addr_Translation_master_agent:rp_valid
	wire  [91:0] rsp_mux_002_src_data;                                                                    // rsp_mux_002:src_data -> Pixel_DMA_Addr_Translation_master_agent:rp_data
	wire         rsp_mux_002_src_ready;                                                                   // Pixel_DMA_Addr_Translation_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire  [10:0] rsp_mux_002_src_channel;                                                                 // rsp_mux_002:src_channel -> Pixel_DMA_Addr_Translation_master_agent:rp_channel
	wire         rsp_mux_002_src_startofpacket;                                                           // rsp_mux_002:src_startofpacket -> Pixel_DMA_Addr_Translation_master_agent:rp_startofpacket
	wire         rsp_mux_002_src_endofpacket;                                                             // rsp_mux_002:src_endofpacket -> Pixel_DMA_Addr_Translation_master_agent:rp_endofpacket
	wire  [31:0] adc_adc_slave_agent_m0_readdata;                                                         // ADC_adc_slave_translator:uav_readdata -> ADC_adc_slave_agent:m0_readdata
	wire         adc_adc_slave_agent_m0_waitrequest;                                                      // ADC_adc_slave_translator:uav_waitrequest -> ADC_adc_slave_agent:m0_waitrequest
	wire         adc_adc_slave_agent_m0_debugaccess;                                                      // ADC_adc_slave_agent:m0_debugaccess -> ADC_adc_slave_translator:uav_debugaccess
	wire  [15:0] adc_adc_slave_agent_m0_address;                                                          // ADC_adc_slave_agent:m0_address -> ADC_adc_slave_translator:uav_address
	wire   [3:0] adc_adc_slave_agent_m0_byteenable;                                                       // ADC_adc_slave_agent:m0_byteenable -> ADC_adc_slave_translator:uav_byteenable
	wire         adc_adc_slave_agent_m0_read;                                                             // ADC_adc_slave_agent:m0_read -> ADC_adc_slave_translator:uav_read
	wire         adc_adc_slave_agent_m0_readdatavalid;                                                    // ADC_adc_slave_translator:uav_readdatavalid -> ADC_adc_slave_agent:m0_readdatavalid
	wire         adc_adc_slave_agent_m0_lock;                                                             // ADC_adc_slave_agent:m0_lock -> ADC_adc_slave_translator:uav_lock
	wire  [31:0] adc_adc_slave_agent_m0_writedata;                                                        // ADC_adc_slave_agent:m0_writedata -> ADC_adc_slave_translator:uav_writedata
	wire         adc_adc_slave_agent_m0_write;                                                            // ADC_adc_slave_agent:m0_write -> ADC_adc_slave_translator:uav_write
	wire   [2:0] adc_adc_slave_agent_m0_burstcount;                                                       // ADC_adc_slave_agent:m0_burstcount -> ADC_adc_slave_translator:uav_burstcount
	wire         adc_adc_slave_agent_rf_source_valid;                                                     // ADC_adc_slave_agent:rf_source_valid -> ADC_adc_slave_agent_rsp_fifo:in_valid
	wire  [92:0] adc_adc_slave_agent_rf_source_data;                                                      // ADC_adc_slave_agent:rf_source_data -> ADC_adc_slave_agent_rsp_fifo:in_data
	wire         adc_adc_slave_agent_rf_source_ready;                                                     // ADC_adc_slave_agent_rsp_fifo:in_ready -> ADC_adc_slave_agent:rf_source_ready
	wire         adc_adc_slave_agent_rf_source_startofpacket;                                             // ADC_adc_slave_agent:rf_source_startofpacket -> ADC_adc_slave_agent_rsp_fifo:in_startofpacket
	wire         adc_adc_slave_agent_rf_source_endofpacket;                                               // ADC_adc_slave_agent:rf_source_endofpacket -> ADC_adc_slave_agent_rsp_fifo:in_endofpacket
	wire         adc_adc_slave_agent_rsp_fifo_out_valid;                                                  // ADC_adc_slave_agent_rsp_fifo:out_valid -> ADC_adc_slave_agent:rf_sink_valid
	wire  [92:0] adc_adc_slave_agent_rsp_fifo_out_data;                                                   // ADC_adc_slave_agent_rsp_fifo:out_data -> ADC_adc_slave_agent:rf_sink_data
	wire         adc_adc_slave_agent_rsp_fifo_out_ready;                                                  // ADC_adc_slave_agent:rf_sink_ready -> ADC_adc_slave_agent_rsp_fifo:out_ready
	wire         adc_adc_slave_agent_rsp_fifo_out_startofpacket;                                          // ADC_adc_slave_agent_rsp_fifo:out_startofpacket -> ADC_adc_slave_agent:rf_sink_startofpacket
	wire         adc_adc_slave_agent_rsp_fifo_out_endofpacket;                                            // ADC_adc_slave_agent_rsp_fifo:out_endofpacket -> ADC_adc_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                       // cmd_mux:src_valid -> ADC_adc_slave_agent:cp_valid
	wire  [91:0] cmd_mux_src_data;                                                                        // cmd_mux:src_data -> ADC_adc_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                       // ADC_adc_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [10:0] cmd_mux_src_channel;                                                                     // cmd_mux:src_channel -> ADC_adc_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                               // cmd_mux:src_startofpacket -> ADC_adc_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                                 // cmd_mux:src_endofpacket -> ADC_adc_slave_agent:cp_endofpacket
	wire  [31:0] av_config_avalon_av_config_slave_agent_m0_readdata;                                      // AV_Config_avalon_av_config_slave_translator:uav_readdata -> AV_Config_avalon_av_config_slave_agent:m0_readdata
	wire         av_config_avalon_av_config_slave_agent_m0_waitrequest;                                   // AV_Config_avalon_av_config_slave_translator:uav_waitrequest -> AV_Config_avalon_av_config_slave_agent:m0_waitrequest
	wire         av_config_avalon_av_config_slave_agent_m0_debugaccess;                                   // AV_Config_avalon_av_config_slave_agent:m0_debugaccess -> AV_Config_avalon_av_config_slave_translator:uav_debugaccess
	wire  [15:0] av_config_avalon_av_config_slave_agent_m0_address;                                       // AV_Config_avalon_av_config_slave_agent:m0_address -> AV_Config_avalon_av_config_slave_translator:uav_address
	wire   [3:0] av_config_avalon_av_config_slave_agent_m0_byteenable;                                    // AV_Config_avalon_av_config_slave_agent:m0_byteenable -> AV_Config_avalon_av_config_slave_translator:uav_byteenable
	wire         av_config_avalon_av_config_slave_agent_m0_read;                                          // AV_Config_avalon_av_config_slave_agent:m0_read -> AV_Config_avalon_av_config_slave_translator:uav_read
	wire         av_config_avalon_av_config_slave_agent_m0_readdatavalid;                                 // AV_Config_avalon_av_config_slave_translator:uav_readdatavalid -> AV_Config_avalon_av_config_slave_agent:m0_readdatavalid
	wire         av_config_avalon_av_config_slave_agent_m0_lock;                                          // AV_Config_avalon_av_config_slave_agent:m0_lock -> AV_Config_avalon_av_config_slave_translator:uav_lock
	wire  [31:0] av_config_avalon_av_config_slave_agent_m0_writedata;                                     // AV_Config_avalon_av_config_slave_agent:m0_writedata -> AV_Config_avalon_av_config_slave_translator:uav_writedata
	wire         av_config_avalon_av_config_slave_agent_m0_write;                                         // AV_Config_avalon_av_config_slave_agent:m0_write -> AV_Config_avalon_av_config_slave_translator:uav_write
	wire   [2:0] av_config_avalon_av_config_slave_agent_m0_burstcount;                                    // AV_Config_avalon_av_config_slave_agent:m0_burstcount -> AV_Config_avalon_av_config_slave_translator:uav_burstcount
	wire         av_config_avalon_av_config_slave_agent_rf_source_valid;                                  // AV_Config_avalon_av_config_slave_agent:rf_source_valid -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [92:0] av_config_avalon_av_config_slave_agent_rf_source_data;                                   // AV_Config_avalon_av_config_slave_agent:rf_source_data -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire         av_config_avalon_av_config_slave_agent_rf_source_ready;                                  // AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rf_source_ready
	wire         av_config_avalon_av_config_slave_agent_rf_source_startofpacket;                          // AV_Config_avalon_av_config_slave_agent:rf_source_startofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire         av_config_avalon_av_config_slave_agent_rf_source_endofpacket;                            // AV_Config_avalon_av_config_slave_agent:rf_source_endofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire         av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid;                               // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> AV_Config_avalon_av_config_slave_agent:rf_sink_valid
	wire  [92:0] av_config_avalon_av_config_slave_agent_rsp_fifo_out_data;                                // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_data -> AV_Config_avalon_av_config_slave_agent:rf_sink_data
	wire         av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready;                               // AV_Config_avalon_av_config_slave_agent:rf_sink_ready -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire         av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;                       // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire         av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;                         // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                                   // cmd_mux_001:src_valid -> AV_Config_avalon_av_config_slave_agent:cp_valid
	wire  [91:0] cmd_mux_001_src_data;                                                                    // cmd_mux_001:src_data -> AV_Config_avalon_av_config_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                                   // AV_Config_avalon_av_config_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [10:0] cmd_mux_001_src_channel;                                                                 // cmd_mux_001:src_channel -> AV_Config_avalon_av_config_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                           // cmd_mux_001:src_startofpacket -> AV_Config_avalon_av_config_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                             // cmd_mux_001:src_endofpacket -> AV_Config_avalon_av_config_slave_agent:cp_endofpacket
	wire  [31:0] d5m_subsystem_avalon_d5m_config_slave_agent_m0_readdata;                                 // D5M_Subsystem_avalon_d5m_config_slave_translator:uav_readdata -> D5M_Subsystem_avalon_d5m_config_slave_agent:m0_readdata
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_m0_waitrequest;                              // D5M_Subsystem_avalon_d5m_config_slave_translator:uav_waitrequest -> D5M_Subsystem_avalon_d5m_config_slave_agent:m0_waitrequest
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_m0_debugaccess;                              // D5M_Subsystem_avalon_d5m_config_slave_agent:m0_debugaccess -> D5M_Subsystem_avalon_d5m_config_slave_translator:uav_debugaccess
	wire  [15:0] d5m_subsystem_avalon_d5m_config_slave_agent_m0_address;                                  // D5M_Subsystem_avalon_d5m_config_slave_agent:m0_address -> D5M_Subsystem_avalon_d5m_config_slave_translator:uav_address
	wire   [3:0] d5m_subsystem_avalon_d5m_config_slave_agent_m0_byteenable;                               // D5M_Subsystem_avalon_d5m_config_slave_agent:m0_byteenable -> D5M_Subsystem_avalon_d5m_config_slave_translator:uav_byteenable
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_m0_read;                                     // D5M_Subsystem_avalon_d5m_config_slave_agent:m0_read -> D5M_Subsystem_avalon_d5m_config_slave_translator:uav_read
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_m0_readdatavalid;                            // D5M_Subsystem_avalon_d5m_config_slave_translator:uav_readdatavalid -> D5M_Subsystem_avalon_d5m_config_slave_agent:m0_readdatavalid
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_m0_lock;                                     // D5M_Subsystem_avalon_d5m_config_slave_agent:m0_lock -> D5M_Subsystem_avalon_d5m_config_slave_translator:uav_lock
	wire  [31:0] d5m_subsystem_avalon_d5m_config_slave_agent_m0_writedata;                                // D5M_Subsystem_avalon_d5m_config_slave_agent:m0_writedata -> D5M_Subsystem_avalon_d5m_config_slave_translator:uav_writedata
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_m0_write;                                    // D5M_Subsystem_avalon_d5m_config_slave_agent:m0_write -> D5M_Subsystem_avalon_d5m_config_slave_translator:uav_write
	wire   [2:0] d5m_subsystem_avalon_d5m_config_slave_agent_m0_burstcount;                               // D5M_Subsystem_avalon_d5m_config_slave_agent:m0_burstcount -> D5M_Subsystem_avalon_d5m_config_slave_translator:uav_burstcount
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_valid;                             // D5M_Subsystem_avalon_d5m_config_slave_agent:rf_source_valid -> D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:in_valid
	wire  [92:0] d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_data;                              // D5M_Subsystem_avalon_d5m_config_slave_agent:rf_source_data -> D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:in_data
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_ready;                             // D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:in_ready -> D5M_Subsystem_avalon_d5m_config_slave_agent:rf_source_ready
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_startofpacket;                     // D5M_Subsystem_avalon_d5m_config_slave_agent:rf_source_startofpacket -> D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:in_startofpacket
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_endofpacket;                       // D5M_Subsystem_avalon_d5m_config_slave_agent:rf_source_endofpacket -> D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:in_endofpacket
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_valid;                          // D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:out_valid -> D5M_Subsystem_avalon_d5m_config_slave_agent:rf_sink_valid
	wire  [92:0] d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_data;                           // D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:out_data -> D5M_Subsystem_avalon_d5m_config_slave_agent:rf_sink_data
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_ready;                          // D5M_Subsystem_avalon_d5m_config_slave_agent:rf_sink_ready -> D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:out_ready
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_startofpacket;                  // D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:out_startofpacket -> D5M_Subsystem_avalon_d5m_config_slave_agent:rf_sink_startofpacket
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_endofpacket;                    // D5M_Subsystem_avalon_d5m_config_slave_agent_rsp_fifo:out_endofpacket -> D5M_Subsystem_avalon_d5m_config_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                                   // cmd_mux_002:src_valid -> D5M_Subsystem_avalon_d5m_config_slave_agent:cp_valid
	wire  [91:0] cmd_mux_002_src_data;                                                                    // cmd_mux_002:src_data -> D5M_Subsystem_avalon_d5m_config_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                                   // D5M_Subsystem_avalon_d5m_config_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [10:0] cmd_mux_002_src_channel;                                                                 // cmd_mux_002:src_channel -> D5M_Subsystem_avalon_d5m_config_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                           // cmd_mux_002:src_startofpacket -> D5M_Subsystem_avalon_d5m_config_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                             // cmd_mux_002:src_endofpacket -> D5M_Subsystem_avalon_d5m_config_slave_agent:cp_endofpacket
	wire  [31:0] acl_kernel_interface_ctrl_agent_m0_readdata;                                             // acl_kernel_interface_ctrl_translator:uav_readdata -> acl_kernel_interface_ctrl_agent:m0_readdata
	wire         acl_kernel_interface_ctrl_agent_m0_waitrequest;                                          // acl_kernel_interface_ctrl_translator:uav_waitrequest -> acl_kernel_interface_ctrl_agent:m0_waitrequest
	wire         acl_kernel_interface_ctrl_agent_m0_debugaccess;                                          // acl_kernel_interface_ctrl_agent:m0_debugaccess -> acl_kernel_interface_ctrl_translator:uav_debugaccess
	wire  [15:0] acl_kernel_interface_ctrl_agent_m0_address;                                              // acl_kernel_interface_ctrl_agent:m0_address -> acl_kernel_interface_ctrl_translator:uav_address
	wire   [3:0] acl_kernel_interface_ctrl_agent_m0_byteenable;                                           // acl_kernel_interface_ctrl_agent:m0_byteenable -> acl_kernel_interface_ctrl_translator:uav_byteenable
	wire         acl_kernel_interface_ctrl_agent_m0_read;                                                 // acl_kernel_interface_ctrl_agent:m0_read -> acl_kernel_interface_ctrl_translator:uav_read
	wire         acl_kernel_interface_ctrl_agent_m0_readdatavalid;                                        // acl_kernel_interface_ctrl_translator:uav_readdatavalid -> acl_kernel_interface_ctrl_agent:m0_readdatavalid
	wire         acl_kernel_interface_ctrl_agent_m0_lock;                                                 // acl_kernel_interface_ctrl_agent:m0_lock -> acl_kernel_interface_ctrl_translator:uav_lock
	wire  [31:0] acl_kernel_interface_ctrl_agent_m0_writedata;                                            // acl_kernel_interface_ctrl_agent:m0_writedata -> acl_kernel_interface_ctrl_translator:uav_writedata
	wire         acl_kernel_interface_ctrl_agent_m0_write;                                                // acl_kernel_interface_ctrl_agent:m0_write -> acl_kernel_interface_ctrl_translator:uav_write
	wire   [2:0] acl_kernel_interface_ctrl_agent_m0_burstcount;                                           // acl_kernel_interface_ctrl_agent:m0_burstcount -> acl_kernel_interface_ctrl_translator:uav_burstcount
	wire         acl_kernel_interface_ctrl_agent_rf_source_valid;                                         // acl_kernel_interface_ctrl_agent:rf_source_valid -> acl_kernel_interface_ctrl_agent_rsp_fifo:in_valid
	wire  [92:0] acl_kernel_interface_ctrl_agent_rf_source_data;                                          // acl_kernel_interface_ctrl_agent:rf_source_data -> acl_kernel_interface_ctrl_agent_rsp_fifo:in_data
	wire         acl_kernel_interface_ctrl_agent_rf_source_ready;                                         // acl_kernel_interface_ctrl_agent_rsp_fifo:in_ready -> acl_kernel_interface_ctrl_agent:rf_source_ready
	wire         acl_kernel_interface_ctrl_agent_rf_source_startofpacket;                                 // acl_kernel_interface_ctrl_agent:rf_source_startofpacket -> acl_kernel_interface_ctrl_agent_rsp_fifo:in_startofpacket
	wire         acl_kernel_interface_ctrl_agent_rf_source_endofpacket;                                   // acl_kernel_interface_ctrl_agent:rf_source_endofpacket -> acl_kernel_interface_ctrl_agent_rsp_fifo:in_endofpacket
	wire         acl_kernel_interface_ctrl_agent_rsp_fifo_out_valid;                                      // acl_kernel_interface_ctrl_agent_rsp_fifo:out_valid -> acl_kernel_interface_ctrl_agent:rf_sink_valid
	wire  [92:0] acl_kernel_interface_ctrl_agent_rsp_fifo_out_data;                                       // acl_kernel_interface_ctrl_agent_rsp_fifo:out_data -> acl_kernel_interface_ctrl_agent:rf_sink_data
	wire         acl_kernel_interface_ctrl_agent_rsp_fifo_out_ready;                                      // acl_kernel_interface_ctrl_agent:rf_sink_ready -> acl_kernel_interface_ctrl_agent_rsp_fifo:out_ready
	wire         acl_kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket;                              // acl_kernel_interface_ctrl_agent_rsp_fifo:out_startofpacket -> acl_kernel_interface_ctrl_agent:rf_sink_startofpacket
	wire         acl_kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket;                                // acl_kernel_interface_ctrl_agent_rsp_fifo:out_endofpacket -> acl_kernel_interface_ctrl_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                                   // cmd_mux_003:src_valid -> acl_kernel_interface_ctrl_agent:cp_valid
	wire  [91:0] cmd_mux_003_src_data;                                                                    // cmd_mux_003:src_data -> acl_kernel_interface_ctrl_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                                   // acl_kernel_interface_ctrl_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [10:0] cmd_mux_003_src_channel;                                                                 // cmd_mux_003:src_channel -> acl_kernel_interface_ctrl_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                           // cmd_mux_003:src_startofpacket -> acl_kernel_interface_ctrl_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                             // cmd_mux_003:src_endofpacket -> acl_kernel_interface_ctrl_agent:cp_endofpacket
	wire  [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_readdata;                                 // VGA_Subsystem_pixel_dma_control_slave_translator:uav_readdata -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_readdata
	wire         vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest;                              // VGA_Subsystem_pixel_dma_control_slave_translator:uav_waitrequest -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_waitrequest
	wire         vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess;                              // VGA_Subsystem_pixel_dma_control_slave_agent:m0_debugaccess -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_debugaccess
	wire  [15:0] vga_subsystem_pixel_dma_control_slave_agent_m0_address;                                  // VGA_Subsystem_pixel_dma_control_slave_agent:m0_address -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_address
	wire   [3:0] vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable;                               // VGA_Subsystem_pixel_dma_control_slave_agent:m0_byteenable -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_byteenable
	wire         vga_subsystem_pixel_dma_control_slave_agent_m0_read;                                     // VGA_Subsystem_pixel_dma_control_slave_agent:m0_read -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_read
	wire         vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid;                            // VGA_Subsystem_pixel_dma_control_slave_translator:uav_readdatavalid -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_readdatavalid
	wire         vga_subsystem_pixel_dma_control_slave_agent_m0_lock;                                     // VGA_Subsystem_pixel_dma_control_slave_agent:m0_lock -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_lock
	wire  [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_writedata;                                // VGA_Subsystem_pixel_dma_control_slave_agent:m0_writedata -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_writedata
	wire         vga_subsystem_pixel_dma_control_slave_agent_m0_write;                                    // VGA_Subsystem_pixel_dma_control_slave_agent:m0_write -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_write
	wire   [2:0] vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount;                               // VGA_Subsystem_pixel_dma_control_slave_agent:m0_burstcount -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_burstcount
	wire         vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid;                             // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_valid -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_valid
	wire  [92:0] vga_subsystem_pixel_dma_control_slave_agent_rf_source_data;                              // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_data -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_data
	wire         vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready;                             // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_ready
	wire         vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket;                     // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_startofpacket
	wire         vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket;                       // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_endofpacket
	wire         vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid;                          // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_valid
	wire  [92:0] vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data;                           // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_data -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_data
	wire         vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready;                          // VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_ready -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_ready
	wire         vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket;                  // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_startofpacket
	wire         vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket;                    // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                                   // cmd_mux_004:src_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_valid
	wire  [91:0] cmd_mux_004_src_data;                                                                    // cmd_mux_004:src_data -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                                   // VGA_Subsystem_pixel_dma_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [10:0] cmd_mux_004_src_channel;                                                                 // cmd_mux_004:src_channel -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                           // cmd_mux_004:src_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                             // cmd_mux_004:src_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_endofpacket
	wire  [31:0] version_id_s_agent_m0_readdata;                                                          // version_id_s_translator:uav_readdata -> version_id_s_agent:m0_readdata
	wire         version_id_s_agent_m0_waitrequest;                                                       // version_id_s_translator:uav_waitrequest -> version_id_s_agent:m0_waitrequest
	wire         version_id_s_agent_m0_debugaccess;                                                       // version_id_s_agent:m0_debugaccess -> version_id_s_translator:uav_debugaccess
	wire  [15:0] version_id_s_agent_m0_address;                                                           // version_id_s_agent:m0_address -> version_id_s_translator:uav_address
	wire   [3:0] version_id_s_agent_m0_byteenable;                                                        // version_id_s_agent:m0_byteenable -> version_id_s_translator:uav_byteenable
	wire         version_id_s_agent_m0_read;                                                              // version_id_s_agent:m0_read -> version_id_s_translator:uav_read
	wire         version_id_s_agent_m0_readdatavalid;                                                     // version_id_s_translator:uav_readdatavalid -> version_id_s_agent:m0_readdatavalid
	wire         version_id_s_agent_m0_lock;                                                              // version_id_s_agent:m0_lock -> version_id_s_translator:uav_lock
	wire  [31:0] version_id_s_agent_m0_writedata;                                                         // version_id_s_agent:m0_writedata -> version_id_s_translator:uav_writedata
	wire         version_id_s_agent_m0_write;                                                             // version_id_s_agent:m0_write -> version_id_s_translator:uav_write
	wire   [2:0] version_id_s_agent_m0_burstcount;                                                        // version_id_s_agent:m0_burstcount -> version_id_s_translator:uav_burstcount
	wire         version_id_s_agent_rf_source_valid;                                                      // version_id_s_agent:rf_source_valid -> version_id_s_agent_rsp_fifo:in_valid
	wire  [92:0] version_id_s_agent_rf_source_data;                                                       // version_id_s_agent:rf_source_data -> version_id_s_agent_rsp_fifo:in_data
	wire         version_id_s_agent_rf_source_ready;                                                      // version_id_s_agent_rsp_fifo:in_ready -> version_id_s_agent:rf_source_ready
	wire         version_id_s_agent_rf_source_startofpacket;                                              // version_id_s_agent:rf_source_startofpacket -> version_id_s_agent_rsp_fifo:in_startofpacket
	wire         version_id_s_agent_rf_source_endofpacket;                                                // version_id_s_agent:rf_source_endofpacket -> version_id_s_agent_rsp_fifo:in_endofpacket
	wire         version_id_s_agent_rsp_fifo_out_valid;                                                   // version_id_s_agent_rsp_fifo:out_valid -> version_id_s_agent:rf_sink_valid
	wire  [92:0] version_id_s_agent_rsp_fifo_out_data;                                                    // version_id_s_agent_rsp_fifo:out_data -> version_id_s_agent:rf_sink_data
	wire         version_id_s_agent_rsp_fifo_out_ready;                                                   // version_id_s_agent:rf_sink_ready -> version_id_s_agent_rsp_fifo:out_ready
	wire         version_id_s_agent_rsp_fifo_out_startofpacket;                                           // version_id_s_agent_rsp_fifo:out_startofpacket -> version_id_s_agent:rf_sink_startofpacket
	wire         version_id_s_agent_rsp_fifo_out_endofpacket;                                             // version_id_s_agent_rsp_fifo:out_endofpacket -> version_id_s_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                                   // cmd_mux_005:src_valid -> version_id_s_agent:cp_valid
	wire  [91:0] cmd_mux_005_src_data;                                                                    // cmd_mux_005:src_data -> version_id_s_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                                   // version_id_s_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [10:0] cmd_mux_005_src_channel;                                                                 // cmd_mux_005:src_channel -> version_id_s_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                           // cmd_mux_005:src_startofpacket -> version_id_s_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                             // cmd_mux_005:src_endofpacket -> version_id_s_agent:cp_endofpacket
	wire  [31:0] led_s1_agent_m0_readdata;                                                                // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire         led_s1_agent_m0_waitrequest;                                                             // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire         led_s1_agent_m0_debugaccess;                                                             // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire  [15:0] led_s1_agent_m0_address;                                                                 // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire   [3:0] led_s1_agent_m0_byteenable;                                                              // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire         led_s1_agent_m0_read;                                                                    // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire         led_s1_agent_m0_readdatavalid;                                                           // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire         led_s1_agent_m0_lock;                                                                    // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire  [31:0] led_s1_agent_m0_writedata;                                                               // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire         led_s1_agent_m0_write;                                                                   // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire   [2:0] led_s1_agent_m0_burstcount;                                                              // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire         led_s1_agent_rf_source_valid;                                                            // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [92:0] led_s1_agent_rf_source_data;                                                             // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire         led_s1_agent_rf_source_ready;                                                            // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire         led_s1_agent_rf_source_startofpacket;                                                    // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire         led_s1_agent_rf_source_endofpacket;                                                      // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire         led_s1_agent_rsp_fifo_out_valid;                                                         // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [92:0] led_s1_agent_rsp_fifo_out_data;                                                          // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire         led_s1_agent_rsp_fifo_out_ready;                                                         // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire         led_s1_agent_rsp_fifo_out_startofpacket;                                                 // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire         led_s1_agent_rsp_fifo_out_endofpacket;                                                   // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                                   // cmd_mux_006:src_valid -> led_s1_agent:cp_valid
	wire  [91:0] cmd_mux_006_src_data;                                                                    // cmd_mux_006:src_data -> led_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                                   // led_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [10:0] cmd_mux_006_src_channel;                                                                 // cmd_mux_006:src_channel -> led_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                           // cmd_mux_006:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                             // cmd_mux_006:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire  [31:0] pushbuttons_s1_agent_m0_readdata;                                                        // Pushbuttons_s1_translator:uav_readdata -> Pushbuttons_s1_agent:m0_readdata
	wire         pushbuttons_s1_agent_m0_waitrequest;                                                     // Pushbuttons_s1_translator:uav_waitrequest -> Pushbuttons_s1_agent:m0_waitrequest
	wire         pushbuttons_s1_agent_m0_debugaccess;                                                     // Pushbuttons_s1_agent:m0_debugaccess -> Pushbuttons_s1_translator:uav_debugaccess
	wire  [15:0] pushbuttons_s1_agent_m0_address;                                                         // Pushbuttons_s1_agent:m0_address -> Pushbuttons_s1_translator:uav_address
	wire   [3:0] pushbuttons_s1_agent_m0_byteenable;                                                      // Pushbuttons_s1_agent:m0_byteenable -> Pushbuttons_s1_translator:uav_byteenable
	wire         pushbuttons_s1_agent_m0_read;                                                            // Pushbuttons_s1_agent:m0_read -> Pushbuttons_s1_translator:uav_read
	wire         pushbuttons_s1_agent_m0_readdatavalid;                                                   // Pushbuttons_s1_translator:uav_readdatavalid -> Pushbuttons_s1_agent:m0_readdatavalid
	wire         pushbuttons_s1_agent_m0_lock;                                                            // Pushbuttons_s1_agent:m0_lock -> Pushbuttons_s1_translator:uav_lock
	wire  [31:0] pushbuttons_s1_agent_m0_writedata;                                                       // Pushbuttons_s1_agent:m0_writedata -> Pushbuttons_s1_translator:uav_writedata
	wire         pushbuttons_s1_agent_m0_write;                                                           // Pushbuttons_s1_agent:m0_write -> Pushbuttons_s1_translator:uav_write
	wire   [2:0] pushbuttons_s1_agent_m0_burstcount;                                                      // Pushbuttons_s1_agent:m0_burstcount -> Pushbuttons_s1_translator:uav_burstcount
	wire         pushbuttons_s1_agent_rf_source_valid;                                                    // Pushbuttons_s1_agent:rf_source_valid -> Pushbuttons_s1_agent_rsp_fifo:in_valid
	wire  [92:0] pushbuttons_s1_agent_rf_source_data;                                                     // Pushbuttons_s1_agent:rf_source_data -> Pushbuttons_s1_agent_rsp_fifo:in_data
	wire         pushbuttons_s1_agent_rf_source_ready;                                                    // Pushbuttons_s1_agent_rsp_fifo:in_ready -> Pushbuttons_s1_agent:rf_source_ready
	wire         pushbuttons_s1_agent_rf_source_startofpacket;                                            // Pushbuttons_s1_agent:rf_source_startofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_startofpacket
	wire         pushbuttons_s1_agent_rf_source_endofpacket;                                              // Pushbuttons_s1_agent:rf_source_endofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_endofpacket
	wire         pushbuttons_s1_agent_rsp_fifo_out_valid;                                                 // Pushbuttons_s1_agent_rsp_fifo:out_valid -> Pushbuttons_s1_agent:rf_sink_valid
	wire  [92:0] pushbuttons_s1_agent_rsp_fifo_out_data;                                                  // Pushbuttons_s1_agent_rsp_fifo:out_data -> Pushbuttons_s1_agent:rf_sink_data
	wire         pushbuttons_s1_agent_rsp_fifo_out_ready;                                                 // Pushbuttons_s1_agent:rf_sink_ready -> Pushbuttons_s1_agent_rsp_fifo:out_ready
	wire         pushbuttons_s1_agent_rsp_fifo_out_startofpacket;                                         // Pushbuttons_s1_agent_rsp_fifo:out_startofpacket -> Pushbuttons_s1_agent:rf_sink_startofpacket
	wire         pushbuttons_s1_agent_rsp_fifo_out_endofpacket;                                           // Pushbuttons_s1_agent_rsp_fifo:out_endofpacket -> Pushbuttons_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                                   // cmd_mux_007:src_valid -> Pushbuttons_s1_agent:cp_valid
	wire  [91:0] cmd_mux_007_src_data;                                                                    // cmd_mux_007:src_data -> Pushbuttons_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                                   // Pushbuttons_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [10:0] cmd_mux_007_src_channel;                                                                 // cmd_mux_007:src_channel -> Pushbuttons_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                           // cmd_mux_007:src_startofpacket -> Pushbuttons_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                             // cmd_mux_007:src_endofpacket -> Pushbuttons_s1_agent:cp_endofpacket
	wire  [31:0] pixel_dma_addr_translation_slave_agent_m0_readdata;                                      // Pixel_DMA_Addr_Translation_slave_translator:uav_readdata -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdata
	wire         pixel_dma_addr_translation_slave_agent_m0_waitrequest;                                   // Pixel_DMA_Addr_Translation_slave_translator:uav_waitrequest -> Pixel_DMA_Addr_Translation_slave_agent:m0_waitrequest
	wire         pixel_dma_addr_translation_slave_agent_m0_debugaccess;                                   // Pixel_DMA_Addr_Translation_slave_agent:m0_debugaccess -> Pixel_DMA_Addr_Translation_slave_translator:uav_debugaccess
	wire  [15:0] pixel_dma_addr_translation_slave_agent_m0_address;                                       // Pixel_DMA_Addr_Translation_slave_agent:m0_address -> Pixel_DMA_Addr_Translation_slave_translator:uav_address
	wire   [3:0] pixel_dma_addr_translation_slave_agent_m0_byteenable;                                    // Pixel_DMA_Addr_Translation_slave_agent:m0_byteenable -> Pixel_DMA_Addr_Translation_slave_translator:uav_byteenable
	wire         pixel_dma_addr_translation_slave_agent_m0_read;                                          // Pixel_DMA_Addr_Translation_slave_agent:m0_read -> Pixel_DMA_Addr_Translation_slave_translator:uav_read
	wire         pixel_dma_addr_translation_slave_agent_m0_readdatavalid;                                 // Pixel_DMA_Addr_Translation_slave_translator:uav_readdatavalid -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdatavalid
	wire         pixel_dma_addr_translation_slave_agent_m0_lock;                                          // Pixel_DMA_Addr_Translation_slave_agent:m0_lock -> Pixel_DMA_Addr_Translation_slave_translator:uav_lock
	wire  [31:0] pixel_dma_addr_translation_slave_agent_m0_writedata;                                     // Pixel_DMA_Addr_Translation_slave_agent:m0_writedata -> Pixel_DMA_Addr_Translation_slave_translator:uav_writedata
	wire         pixel_dma_addr_translation_slave_agent_m0_write;                                         // Pixel_DMA_Addr_Translation_slave_agent:m0_write -> Pixel_DMA_Addr_Translation_slave_translator:uav_write
	wire   [2:0] pixel_dma_addr_translation_slave_agent_m0_burstcount;                                    // Pixel_DMA_Addr_Translation_slave_agent:m0_burstcount -> Pixel_DMA_Addr_Translation_slave_translator:uav_burstcount
	wire         pixel_dma_addr_translation_slave_agent_rf_source_valid;                                  // Pixel_DMA_Addr_Translation_slave_agent:rf_source_valid -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_valid
	wire  [92:0] pixel_dma_addr_translation_slave_agent_rf_source_data;                                   // Pixel_DMA_Addr_Translation_slave_agent:rf_source_data -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_data
	wire         pixel_dma_addr_translation_slave_agent_rf_source_ready;                                  // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rf_source_ready
	wire         pixel_dma_addr_translation_slave_agent_rf_source_startofpacket;                          // Pixel_DMA_Addr_Translation_slave_agent:rf_source_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_startofpacket
	wire         pixel_dma_addr_translation_slave_agent_rf_source_endofpacket;                            // Pixel_DMA_Addr_Translation_slave_agent:rf_source_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_endofpacket
	wire         pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid;                               // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_valid -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_valid
	wire  [92:0] pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data;                                // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_data -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_data
	wire         pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready;                               // Pixel_DMA_Addr_Translation_slave_agent:rf_sink_ready -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_ready
	wire         pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket;                       // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_startofpacket
	wire         pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket;                         // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                                   // cmd_mux_008:src_valid -> Pixel_DMA_Addr_Translation_slave_agent:cp_valid
	wire  [91:0] cmd_mux_008_src_data;                                                                    // cmd_mux_008:src_data -> Pixel_DMA_Addr_Translation_slave_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                                   // Pixel_DMA_Addr_Translation_slave_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [10:0] cmd_mux_008_src_channel;                                                                 // cmd_mux_008:src_channel -> Pixel_DMA_Addr_Translation_slave_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                           // cmd_mux_008:src_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                             // cmd_mux_008:src_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_endofpacket
	wire  [31:0] video_in_dma_addr_translation_slave_agent_m0_readdata;                                   // Video_In_DMA_Addr_Translation_slave_translator:uav_readdata -> Video_In_DMA_Addr_Translation_slave_agent:m0_readdata
	wire         video_in_dma_addr_translation_slave_agent_m0_waitrequest;                                // Video_In_DMA_Addr_Translation_slave_translator:uav_waitrequest -> Video_In_DMA_Addr_Translation_slave_agent:m0_waitrequest
	wire         video_in_dma_addr_translation_slave_agent_m0_debugaccess;                                // Video_In_DMA_Addr_Translation_slave_agent:m0_debugaccess -> Video_In_DMA_Addr_Translation_slave_translator:uav_debugaccess
	wire  [15:0] video_in_dma_addr_translation_slave_agent_m0_address;                                    // Video_In_DMA_Addr_Translation_slave_agent:m0_address -> Video_In_DMA_Addr_Translation_slave_translator:uav_address
	wire   [3:0] video_in_dma_addr_translation_slave_agent_m0_byteenable;                                 // Video_In_DMA_Addr_Translation_slave_agent:m0_byteenable -> Video_In_DMA_Addr_Translation_slave_translator:uav_byteenable
	wire         video_in_dma_addr_translation_slave_agent_m0_read;                                       // Video_In_DMA_Addr_Translation_slave_agent:m0_read -> Video_In_DMA_Addr_Translation_slave_translator:uav_read
	wire         video_in_dma_addr_translation_slave_agent_m0_readdatavalid;                              // Video_In_DMA_Addr_Translation_slave_translator:uav_readdatavalid -> Video_In_DMA_Addr_Translation_slave_agent:m0_readdatavalid
	wire         video_in_dma_addr_translation_slave_agent_m0_lock;                                       // Video_In_DMA_Addr_Translation_slave_agent:m0_lock -> Video_In_DMA_Addr_Translation_slave_translator:uav_lock
	wire  [31:0] video_in_dma_addr_translation_slave_agent_m0_writedata;                                  // Video_In_DMA_Addr_Translation_slave_agent:m0_writedata -> Video_In_DMA_Addr_Translation_slave_translator:uav_writedata
	wire         video_in_dma_addr_translation_slave_agent_m0_write;                                      // Video_In_DMA_Addr_Translation_slave_agent:m0_write -> Video_In_DMA_Addr_Translation_slave_translator:uav_write
	wire   [2:0] video_in_dma_addr_translation_slave_agent_m0_burstcount;                                 // Video_In_DMA_Addr_Translation_slave_agent:m0_burstcount -> Video_In_DMA_Addr_Translation_slave_translator:uav_burstcount
	wire         video_in_dma_addr_translation_slave_agent_rf_source_valid;                               // Video_In_DMA_Addr_Translation_slave_agent:rf_source_valid -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_valid
	wire  [92:0] video_in_dma_addr_translation_slave_agent_rf_source_data;                                // Video_In_DMA_Addr_Translation_slave_agent:rf_source_data -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_data
	wire         video_in_dma_addr_translation_slave_agent_rf_source_ready;                               // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_ready -> Video_In_DMA_Addr_Translation_slave_agent:rf_source_ready
	wire         video_in_dma_addr_translation_slave_agent_rf_source_startofpacket;                       // Video_In_DMA_Addr_Translation_slave_agent:rf_source_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_startofpacket
	wire         video_in_dma_addr_translation_slave_agent_rf_source_endofpacket;                         // Video_In_DMA_Addr_Translation_slave_agent:rf_source_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_endofpacket
	wire         video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid;                            // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_valid -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_valid
	wire  [92:0] video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data;                             // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_data -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_data
	wire         video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready;                            // Video_In_DMA_Addr_Translation_slave_agent:rf_sink_ready -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_ready
	wire         video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket;                    // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_startofpacket
	wire         video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket;                      // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                                   // cmd_mux_009:src_valid -> Video_In_DMA_Addr_Translation_slave_agent:cp_valid
	wire  [91:0] cmd_mux_009_src_data;                                                                    // cmd_mux_009:src_data -> Video_In_DMA_Addr_Translation_slave_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                                   // Video_In_DMA_Addr_Translation_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [10:0] cmd_mux_009_src_channel;                                                                 // cmd_mux_009:src_channel -> Video_In_DMA_Addr_Translation_slave_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                           // cmd_mux_009:src_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                             // cmd_mux_009:src_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent:cp_endofpacket
	wire  [31:0] d5m_subsystem_video_in_dma_control_slave_agent_m0_readdata;                              // D5M_Subsystem_video_in_dma_control_slave_translator:uav_readdata -> D5M_Subsystem_video_in_dma_control_slave_agent:m0_readdata
	wire         d5m_subsystem_video_in_dma_control_slave_agent_m0_waitrequest;                           // D5M_Subsystem_video_in_dma_control_slave_translator:uav_waitrequest -> D5M_Subsystem_video_in_dma_control_slave_agent:m0_waitrequest
	wire         d5m_subsystem_video_in_dma_control_slave_agent_m0_debugaccess;                           // D5M_Subsystem_video_in_dma_control_slave_agent:m0_debugaccess -> D5M_Subsystem_video_in_dma_control_slave_translator:uav_debugaccess
	wire  [15:0] d5m_subsystem_video_in_dma_control_slave_agent_m0_address;                               // D5M_Subsystem_video_in_dma_control_slave_agent:m0_address -> D5M_Subsystem_video_in_dma_control_slave_translator:uav_address
	wire   [3:0] d5m_subsystem_video_in_dma_control_slave_agent_m0_byteenable;                            // D5M_Subsystem_video_in_dma_control_slave_agent:m0_byteenable -> D5M_Subsystem_video_in_dma_control_slave_translator:uav_byteenable
	wire         d5m_subsystem_video_in_dma_control_slave_agent_m0_read;                                  // D5M_Subsystem_video_in_dma_control_slave_agent:m0_read -> D5M_Subsystem_video_in_dma_control_slave_translator:uav_read
	wire         d5m_subsystem_video_in_dma_control_slave_agent_m0_readdatavalid;                         // D5M_Subsystem_video_in_dma_control_slave_translator:uav_readdatavalid -> D5M_Subsystem_video_in_dma_control_slave_agent:m0_readdatavalid
	wire         d5m_subsystem_video_in_dma_control_slave_agent_m0_lock;                                  // D5M_Subsystem_video_in_dma_control_slave_agent:m0_lock -> D5M_Subsystem_video_in_dma_control_slave_translator:uav_lock
	wire  [31:0] d5m_subsystem_video_in_dma_control_slave_agent_m0_writedata;                             // D5M_Subsystem_video_in_dma_control_slave_agent:m0_writedata -> D5M_Subsystem_video_in_dma_control_slave_translator:uav_writedata
	wire         d5m_subsystem_video_in_dma_control_slave_agent_m0_write;                                 // D5M_Subsystem_video_in_dma_control_slave_agent:m0_write -> D5M_Subsystem_video_in_dma_control_slave_translator:uav_write
	wire   [2:0] d5m_subsystem_video_in_dma_control_slave_agent_m0_burstcount;                            // D5M_Subsystem_video_in_dma_control_slave_agent:m0_burstcount -> D5M_Subsystem_video_in_dma_control_slave_translator:uav_burstcount
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rf_source_valid;                          // D5M_Subsystem_video_in_dma_control_slave_agent:rf_source_valid -> D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_valid
	wire  [92:0] d5m_subsystem_video_in_dma_control_slave_agent_rf_source_data;                           // D5M_Subsystem_video_in_dma_control_slave_agent:rf_source_data -> D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_data
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rf_source_ready;                          // D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_ready -> D5M_Subsystem_video_in_dma_control_slave_agent:rf_source_ready
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rf_source_startofpacket;                  // D5M_Subsystem_video_in_dma_control_slave_agent:rf_source_startofpacket -> D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_startofpacket
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rf_source_endofpacket;                    // D5M_Subsystem_video_in_dma_control_slave_agent:rf_source_endofpacket -> D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_endofpacket
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_valid;                       // D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_valid -> D5M_Subsystem_video_in_dma_control_slave_agent:rf_sink_valid
	wire  [92:0] d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_data;                        // D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_data -> D5M_Subsystem_video_in_dma_control_slave_agent:rf_sink_data
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_ready;                       // D5M_Subsystem_video_in_dma_control_slave_agent:rf_sink_ready -> D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_ready
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_startofpacket;               // D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_startofpacket -> D5M_Subsystem_video_in_dma_control_slave_agent:rf_sink_startofpacket
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_endofpacket;                 // D5M_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_endofpacket -> D5M_Subsystem_video_in_dma_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                                   // cmd_mux_010:src_valid -> D5M_Subsystem_video_in_dma_control_slave_agent:cp_valid
	wire  [91:0] cmd_mux_010_src_data;                                                                    // cmd_mux_010:src_data -> D5M_Subsystem_video_in_dma_control_slave_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                                   // D5M_Subsystem_video_in_dma_control_slave_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [10:0] cmd_mux_010_src_channel;                                                                 // cmd_mux_010:src_channel -> D5M_Subsystem_video_in_dma_control_slave_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                           // cmd_mux_010:src_startofpacket -> D5M_Subsystem_video_in_dma_control_slave_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                             // cmd_mux_010:src_endofpacket -> D5M_Subsystem_video_in_dma_control_slave_agent:cp_endofpacket
	wire         pipe_stage_host_ctrl_m0_agent_cp_valid;                                                  // pipe_stage_host_ctrl_m0_agent:cp_valid -> router:sink_valid
	wire  [91:0] pipe_stage_host_ctrl_m0_agent_cp_data;                                                   // pipe_stage_host_ctrl_m0_agent:cp_data -> router:sink_data
	wire         pipe_stage_host_ctrl_m0_agent_cp_ready;                                                  // router:sink_ready -> pipe_stage_host_ctrl_m0_agent:cp_ready
	wire         pipe_stage_host_ctrl_m0_agent_cp_startofpacket;                                          // pipe_stage_host_ctrl_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         pipe_stage_host_ctrl_m0_agent_cp_endofpacket;                                            // pipe_stage_host_ctrl_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         video_in_dma_addr_translation_master_agent_cp_valid;                                     // Video_In_DMA_Addr_Translation_master_agent:cp_valid -> router_001:sink_valid
	wire  [91:0] video_in_dma_addr_translation_master_agent_cp_data;                                      // Video_In_DMA_Addr_Translation_master_agent:cp_data -> router_001:sink_data
	wire         video_in_dma_addr_translation_master_agent_cp_ready;                                     // router_001:sink_ready -> Video_In_DMA_Addr_Translation_master_agent:cp_ready
	wire         video_in_dma_addr_translation_master_agent_cp_startofpacket;                             // Video_In_DMA_Addr_Translation_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         video_in_dma_addr_translation_master_agent_cp_endofpacket;                               // Video_In_DMA_Addr_Translation_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                                    // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [91:0] router_001_src_data;                                                                     // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                                    // cmd_demux_001:sink_ready -> router_001:src_ready
	wire  [10:0] router_001_src_channel;                                                                  // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                            // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                              // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         pixel_dma_addr_translation_master_agent_cp_valid;                                        // Pixel_DMA_Addr_Translation_master_agent:cp_valid -> router_002:sink_valid
	wire  [91:0] pixel_dma_addr_translation_master_agent_cp_data;                                         // Pixel_DMA_Addr_Translation_master_agent:cp_data -> router_002:sink_data
	wire         pixel_dma_addr_translation_master_agent_cp_ready;                                        // router_002:sink_ready -> Pixel_DMA_Addr_Translation_master_agent:cp_ready
	wire         pixel_dma_addr_translation_master_agent_cp_startofpacket;                                // Pixel_DMA_Addr_Translation_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire         pixel_dma_addr_translation_master_agent_cp_endofpacket;                                  // Pixel_DMA_Addr_Translation_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                                    // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [91:0] router_002_src_data;                                                                     // router_002:src_data -> cmd_demux_002:sink_data
	wire         router_002_src_ready;                                                                    // cmd_demux_002:sink_ready -> router_002:src_ready
	wire  [10:0] router_002_src_channel;                                                                  // router_002:src_channel -> cmd_demux_002:sink_channel
	wire         router_002_src_startofpacket;                                                            // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire         router_002_src_endofpacket;                                                              // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire         adc_adc_slave_agent_rp_valid;                                                            // ADC_adc_slave_agent:rp_valid -> router_003:sink_valid
	wire  [91:0] adc_adc_slave_agent_rp_data;                                                             // ADC_adc_slave_agent:rp_data -> router_003:sink_data
	wire         adc_adc_slave_agent_rp_ready;                                                            // router_003:sink_ready -> ADC_adc_slave_agent:rp_ready
	wire         adc_adc_slave_agent_rp_startofpacket;                                                    // ADC_adc_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         adc_adc_slave_agent_rp_endofpacket;                                                      // ADC_adc_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                                    // router_003:src_valid -> rsp_demux:sink_valid
	wire  [91:0] router_003_src_data;                                                                     // router_003:src_data -> rsp_demux:sink_data
	wire         router_003_src_ready;                                                                    // rsp_demux:sink_ready -> router_003:src_ready
	wire  [10:0] router_003_src_channel;                                                                  // router_003:src_channel -> rsp_demux:sink_channel
	wire         router_003_src_startofpacket;                                                            // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_003_src_endofpacket;                                                              // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         av_config_avalon_av_config_slave_agent_rp_valid;                                         // AV_Config_avalon_av_config_slave_agent:rp_valid -> router_004:sink_valid
	wire  [91:0] av_config_avalon_av_config_slave_agent_rp_data;                                          // AV_Config_avalon_av_config_slave_agent:rp_data -> router_004:sink_data
	wire         av_config_avalon_av_config_slave_agent_rp_ready;                                         // router_004:sink_ready -> AV_Config_avalon_av_config_slave_agent:rp_ready
	wire         av_config_avalon_av_config_slave_agent_rp_startofpacket;                                 // AV_Config_avalon_av_config_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         av_config_avalon_av_config_slave_agent_rp_endofpacket;                                   // AV_Config_avalon_av_config_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                                    // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [91:0] router_004_src_data;                                                                     // router_004:src_data -> rsp_demux_001:sink_data
	wire         router_004_src_ready;                                                                    // rsp_demux_001:sink_ready -> router_004:src_ready
	wire  [10:0] router_004_src_channel;                                                                  // router_004:src_channel -> rsp_demux_001:sink_channel
	wire         router_004_src_startofpacket;                                                            // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_004_src_endofpacket;                                                              // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rp_valid;                                    // D5M_Subsystem_avalon_d5m_config_slave_agent:rp_valid -> router_005:sink_valid
	wire  [91:0] d5m_subsystem_avalon_d5m_config_slave_agent_rp_data;                                     // D5M_Subsystem_avalon_d5m_config_slave_agent:rp_data -> router_005:sink_data
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rp_ready;                                    // router_005:sink_ready -> D5M_Subsystem_avalon_d5m_config_slave_agent:rp_ready
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rp_startofpacket;                            // D5M_Subsystem_avalon_d5m_config_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rp_endofpacket;                              // D5M_Subsystem_avalon_d5m_config_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                                    // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [91:0] router_005_src_data;                                                                     // router_005:src_data -> rsp_demux_002:sink_data
	wire         router_005_src_ready;                                                                    // rsp_demux_002:sink_ready -> router_005:src_ready
	wire  [10:0] router_005_src_channel;                                                                  // router_005:src_channel -> rsp_demux_002:sink_channel
	wire         router_005_src_startofpacket;                                                            // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_005_src_endofpacket;                                                              // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         acl_kernel_interface_ctrl_agent_rp_valid;                                                // acl_kernel_interface_ctrl_agent:rp_valid -> router_006:sink_valid
	wire  [91:0] acl_kernel_interface_ctrl_agent_rp_data;                                                 // acl_kernel_interface_ctrl_agent:rp_data -> router_006:sink_data
	wire         acl_kernel_interface_ctrl_agent_rp_ready;                                                // router_006:sink_ready -> acl_kernel_interface_ctrl_agent:rp_ready
	wire         acl_kernel_interface_ctrl_agent_rp_startofpacket;                                        // acl_kernel_interface_ctrl_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         acl_kernel_interface_ctrl_agent_rp_endofpacket;                                          // acl_kernel_interface_ctrl_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                                    // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [91:0] router_006_src_data;                                                                     // router_006:src_data -> rsp_demux_003:sink_data
	wire         router_006_src_ready;                                                                    // rsp_demux_003:sink_ready -> router_006:src_ready
	wire  [10:0] router_006_src_channel;                                                                  // router_006:src_channel -> rsp_demux_003:sink_channel
	wire         router_006_src_startofpacket;                                                            // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_006_src_endofpacket;                                                              // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         vga_subsystem_pixel_dma_control_slave_agent_rp_valid;                                    // VGA_Subsystem_pixel_dma_control_slave_agent:rp_valid -> router_007:sink_valid
	wire  [91:0] vga_subsystem_pixel_dma_control_slave_agent_rp_data;                                     // VGA_Subsystem_pixel_dma_control_slave_agent:rp_data -> router_007:sink_data
	wire         vga_subsystem_pixel_dma_control_slave_agent_rp_ready;                                    // router_007:sink_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rp_ready
	wire         vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket;                            // VGA_Subsystem_pixel_dma_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket;                              // VGA_Subsystem_pixel_dma_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                                    // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [91:0] router_007_src_data;                                                                     // router_007:src_data -> rsp_demux_004:sink_data
	wire         router_007_src_ready;                                                                    // rsp_demux_004:sink_ready -> router_007:src_ready
	wire  [10:0] router_007_src_channel;                                                                  // router_007:src_channel -> rsp_demux_004:sink_channel
	wire         router_007_src_startofpacket;                                                            // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_007_src_endofpacket;                                                              // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         version_id_s_agent_rp_valid;                                                             // version_id_s_agent:rp_valid -> router_008:sink_valid
	wire  [91:0] version_id_s_agent_rp_data;                                                              // version_id_s_agent:rp_data -> router_008:sink_data
	wire         version_id_s_agent_rp_ready;                                                             // router_008:sink_ready -> version_id_s_agent:rp_ready
	wire         version_id_s_agent_rp_startofpacket;                                                     // version_id_s_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         version_id_s_agent_rp_endofpacket;                                                       // version_id_s_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                                    // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [91:0] router_008_src_data;                                                                     // router_008:src_data -> rsp_demux_005:sink_data
	wire         router_008_src_ready;                                                                    // rsp_demux_005:sink_ready -> router_008:src_ready
	wire  [10:0] router_008_src_channel;                                                                  // router_008:src_channel -> rsp_demux_005:sink_channel
	wire         router_008_src_startofpacket;                                                            // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_008_src_endofpacket;                                                              // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         led_s1_agent_rp_valid;                                                                   // led_s1_agent:rp_valid -> router_009:sink_valid
	wire  [91:0] led_s1_agent_rp_data;                                                                    // led_s1_agent:rp_data -> router_009:sink_data
	wire         led_s1_agent_rp_ready;                                                                   // router_009:sink_ready -> led_s1_agent:rp_ready
	wire         led_s1_agent_rp_startofpacket;                                                           // led_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         led_s1_agent_rp_endofpacket;                                                             // led_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                                    // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [91:0] router_009_src_data;                                                                     // router_009:src_data -> rsp_demux_006:sink_data
	wire         router_009_src_ready;                                                                    // rsp_demux_006:sink_ready -> router_009:src_ready
	wire  [10:0] router_009_src_channel;                                                                  // router_009:src_channel -> rsp_demux_006:sink_channel
	wire         router_009_src_startofpacket;                                                            // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_009_src_endofpacket;                                                              // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         pushbuttons_s1_agent_rp_valid;                                                           // Pushbuttons_s1_agent:rp_valid -> router_010:sink_valid
	wire  [91:0] pushbuttons_s1_agent_rp_data;                                                            // Pushbuttons_s1_agent:rp_data -> router_010:sink_data
	wire         pushbuttons_s1_agent_rp_ready;                                                           // router_010:sink_ready -> Pushbuttons_s1_agent:rp_ready
	wire         pushbuttons_s1_agent_rp_startofpacket;                                                   // Pushbuttons_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         pushbuttons_s1_agent_rp_endofpacket;                                                     // Pushbuttons_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                                    // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [91:0] router_010_src_data;                                                                     // router_010:src_data -> rsp_demux_007:sink_data
	wire         router_010_src_ready;                                                                    // rsp_demux_007:sink_ready -> router_010:src_ready
	wire  [10:0] router_010_src_channel;                                                                  // router_010:src_channel -> rsp_demux_007:sink_channel
	wire         router_010_src_startofpacket;                                                            // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_010_src_endofpacket;                                                              // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         pixel_dma_addr_translation_slave_agent_rp_valid;                                         // Pixel_DMA_Addr_Translation_slave_agent:rp_valid -> router_011:sink_valid
	wire  [91:0] pixel_dma_addr_translation_slave_agent_rp_data;                                          // Pixel_DMA_Addr_Translation_slave_agent:rp_data -> router_011:sink_data
	wire         pixel_dma_addr_translation_slave_agent_rp_ready;                                         // router_011:sink_ready -> Pixel_DMA_Addr_Translation_slave_agent:rp_ready
	wire         pixel_dma_addr_translation_slave_agent_rp_startofpacket;                                 // Pixel_DMA_Addr_Translation_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         pixel_dma_addr_translation_slave_agent_rp_endofpacket;                                   // Pixel_DMA_Addr_Translation_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                                    // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [91:0] router_011_src_data;                                                                     // router_011:src_data -> rsp_demux_008:sink_data
	wire         router_011_src_ready;                                                                    // rsp_demux_008:sink_ready -> router_011:src_ready
	wire  [10:0] router_011_src_channel;                                                                  // router_011:src_channel -> rsp_demux_008:sink_channel
	wire         router_011_src_startofpacket;                                                            // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_011_src_endofpacket;                                                              // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         video_in_dma_addr_translation_slave_agent_rp_valid;                                      // Video_In_DMA_Addr_Translation_slave_agent:rp_valid -> router_012:sink_valid
	wire  [91:0] video_in_dma_addr_translation_slave_agent_rp_data;                                       // Video_In_DMA_Addr_Translation_slave_agent:rp_data -> router_012:sink_data
	wire         video_in_dma_addr_translation_slave_agent_rp_ready;                                      // router_012:sink_ready -> Video_In_DMA_Addr_Translation_slave_agent:rp_ready
	wire         video_in_dma_addr_translation_slave_agent_rp_startofpacket;                              // Video_In_DMA_Addr_Translation_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         video_in_dma_addr_translation_slave_agent_rp_endofpacket;                                // Video_In_DMA_Addr_Translation_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                                    // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [91:0] router_012_src_data;                                                                     // router_012:src_data -> rsp_demux_009:sink_data
	wire         router_012_src_ready;                                                                    // rsp_demux_009:sink_ready -> router_012:src_ready
	wire  [10:0] router_012_src_channel;                                                                  // router_012:src_channel -> rsp_demux_009:sink_channel
	wire         router_012_src_startofpacket;                                                            // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_012_src_endofpacket;                                                              // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rp_valid;                                 // D5M_Subsystem_video_in_dma_control_slave_agent:rp_valid -> router_013:sink_valid
	wire  [91:0] d5m_subsystem_video_in_dma_control_slave_agent_rp_data;                                  // D5M_Subsystem_video_in_dma_control_slave_agent:rp_data -> router_013:sink_data
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rp_ready;                                 // router_013:sink_ready -> D5M_Subsystem_video_in_dma_control_slave_agent:rp_ready
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rp_startofpacket;                         // D5M_Subsystem_video_in_dma_control_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rp_endofpacket;                           // D5M_Subsystem_video_in_dma_control_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                                    // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [91:0] router_013_src_data;                                                                     // router_013:src_data -> rsp_demux_010:sink_data
	wire         router_013_src_ready;                                                                    // rsp_demux_010:sink_ready -> router_013:src_ready
	wire  [10:0] router_013_src_channel;                                                                  // router_013:src_channel -> rsp_demux_010:sink_channel
	wire         router_013_src_startofpacket;                                                            // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_013_src_endofpacket;                                                              // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         router_src_valid;                                                                        // router:src_valid -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_valid
	wire  [91:0] router_src_data;                                                                         // router:src_data -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                                        // pipe_stage_host_ctrl_m0_limiter:cmd_sink_ready -> router:src_ready
	wire  [10:0] router_src_channel;                                                                      // router:src_channel -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                                // router:src_startofpacket -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                                  // router:src_endofpacket -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_endofpacket
	wire  [91:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_data;                                            // pipe_stage_host_ctrl_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         pipe_stage_host_ctrl_m0_limiter_cmd_src_ready;                                           // cmd_demux:sink_ready -> pipe_stage_host_ctrl_m0_limiter:cmd_src_ready
	wire  [10:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_channel;                                         // pipe_stage_host_ctrl_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket;                                   // pipe_stage_host_ctrl_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket;                                     // pipe_stage_host_ctrl_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                                       // rsp_mux:src_valid -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_valid
	wire  [91:0] rsp_mux_src_data;                                                                        // rsp_mux:src_data -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                                       // pipe_stage_host_ctrl_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire  [10:0] rsp_mux_src_channel;                                                                     // rsp_mux:src_channel -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                               // rsp_mux:src_startofpacket -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                                 // rsp_mux:src_endofpacket -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_endofpacket
	wire         pipe_stage_host_ctrl_m0_limiter_rsp_src_valid;                                           // pipe_stage_host_ctrl_m0_limiter:rsp_src_valid -> pipe_stage_host_ctrl_m0_agent:rp_valid
	wire  [91:0] pipe_stage_host_ctrl_m0_limiter_rsp_src_data;                                            // pipe_stage_host_ctrl_m0_limiter:rsp_src_data -> pipe_stage_host_ctrl_m0_agent:rp_data
	wire         pipe_stage_host_ctrl_m0_limiter_rsp_src_ready;                                           // pipe_stage_host_ctrl_m0_agent:rp_ready -> pipe_stage_host_ctrl_m0_limiter:rsp_src_ready
	wire  [10:0] pipe_stage_host_ctrl_m0_limiter_rsp_src_channel;                                         // pipe_stage_host_ctrl_m0_limiter:rsp_src_channel -> pipe_stage_host_ctrl_m0_agent:rp_channel
	wire         pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket;                                   // pipe_stage_host_ctrl_m0_limiter:rsp_src_startofpacket -> pipe_stage_host_ctrl_m0_agent:rp_startofpacket
	wire         pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket;                                     // pipe_stage_host_ctrl_m0_limiter:rsp_src_endofpacket -> pipe_stage_host_ctrl_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [91:0] cmd_demux_src0_data;                                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [10:0] cmd_demux_src0_channel;                                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [91:0] cmd_demux_src1_data;                                                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [10:0] cmd_demux_src1_channel;                                                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                                    // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [91:0] cmd_demux_src2_data;                                                                     // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                                    // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [10:0] cmd_demux_src2_channel;                                                                  // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                            // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                              // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                                    // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [91:0] cmd_demux_src3_data;                                                                     // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                                    // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [10:0] cmd_demux_src3_channel;                                                                  // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                            // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                              // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                                    // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [91:0] cmd_demux_src4_data;                                                                     // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                                    // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [10:0] cmd_demux_src4_channel;                                                                  // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                            // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                              // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                                    // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [91:0] cmd_demux_src5_data;                                                                     // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                                    // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [10:0] cmd_demux_src5_channel;                                                                  // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                            // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                              // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                                    // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [91:0] cmd_demux_src6_data;                                                                     // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                                    // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [10:0] cmd_demux_src6_channel;                                                                  // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                            // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                              // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                                    // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [91:0] cmd_demux_src7_data;                                                                     // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                                    // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [10:0] cmd_demux_src7_channel;                                                                  // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                            // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                              // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                                    // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [91:0] cmd_demux_src8_data;                                                                     // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                                    // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [10:0] cmd_demux_src8_channel;                                                                  // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                            // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                              // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                                    // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [91:0] cmd_demux_src9_data;                                                                     // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                                    // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [10:0] cmd_demux_src9_channel;                                                                  // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                            // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                              // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                                   // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [91:0] cmd_demux_src10_data;                                                                    // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                                   // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [10:0] cmd_demux_src10_channel;                                                                 // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                                           // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                             // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                                // cmd_demux_001:src0_valid -> cmd_mux_010:sink1_valid
	wire  [91:0] cmd_demux_001_src0_data;                                                                 // cmd_demux_001:src0_data -> cmd_mux_010:sink1_data
	wire         cmd_demux_001_src0_ready;                                                                // cmd_mux_010:sink1_ready -> cmd_demux_001:src0_ready
	wire  [10:0] cmd_demux_001_src0_channel;                                                              // cmd_demux_001:src0_channel -> cmd_mux_010:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                        // cmd_demux_001:src0_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                          // cmd_demux_001:src0_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire         cmd_demux_002_src0_valid;                                                                // cmd_demux_002:src0_valid -> cmd_mux_004:sink1_valid
	wire  [91:0] cmd_demux_002_src0_data;                                                                 // cmd_demux_002:src0_data -> cmd_mux_004:sink1_data
	wire         cmd_demux_002_src0_ready;                                                                // cmd_mux_004:sink1_ready -> cmd_demux_002:src0_ready
	wire  [10:0] cmd_demux_002_src0_channel;                                                              // cmd_demux_002:src0_channel -> cmd_mux_004:sink1_channel
	wire         cmd_demux_002_src0_startofpacket;                                                        // cmd_demux_002:src0_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire         cmd_demux_002_src0_endofpacket;                                                          // cmd_demux_002:src0_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [91:0] rsp_demux_src0_data;                                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [10:0] rsp_demux_src0_channel;                                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [91:0] rsp_demux_001_src0_data;                                                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [10:0] rsp_demux_001_src0_channel;                                                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                                // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [91:0] rsp_demux_002_src0_data;                                                                 // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                                // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [10:0] rsp_demux_002_src0_channel;                                                              // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                        // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                          // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                                // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [91:0] rsp_demux_003_src0_data;                                                                 // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                                // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [10:0] rsp_demux_003_src0_channel;                                                              // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                        // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                          // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                                // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [91:0] rsp_demux_004_src0_data;                                                                 // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                                // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [10:0] rsp_demux_004_src0_channel;                                                              // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                        // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                          // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_004_src1_valid;                                                                // rsp_demux_004:src1_valid -> rsp_mux_002:sink0_valid
	wire  [91:0] rsp_demux_004_src1_data;                                                                 // rsp_demux_004:src1_data -> rsp_mux_002:sink0_data
	wire         rsp_demux_004_src1_ready;                                                                // rsp_mux_002:sink0_ready -> rsp_demux_004:src1_ready
	wire  [10:0] rsp_demux_004_src1_channel;                                                              // rsp_demux_004:src1_channel -> rsp_mux_002:sink0_channel
	wire         rsp_demux_004_src1_startofpacket;                                                        // rsp_demux_004:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire         rsp_demux_004_src1_endofpacket;                                                          // rsp_demux_004:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire         rsp_demux_005_src0_valid;                                                                // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [91:0] rsp_demux_005_src0_data;                                                                 // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                                // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [10:0] rsp_demux_005_src0_channel;                                                              // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                        // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                          // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                                // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [91:0] rsp_demux_006_src0_data;                                                                 // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                                // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [10:0] rsp_demux_006_src0_channel;                                                              // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                                        // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                          // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                                // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [91:0] rsp_demux_007_src0_data;                                                                 // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                                // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [10:0] rsp_demux_007_src0_channel;                                                              // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                                        // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                          // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                                // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [91:0] rsp_demux_008_src0_data;                                                                 // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                                // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [10:0] rsp_demux_008_src0_channel;                                                              // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                        // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                          // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                                // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [91:0] rsp_demux_009_src0_data;                                                                 // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                                // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [10:0] rsp_demux_009_src0_channel;                                                              // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                        // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                          // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                                // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [91:0] rsp_demux_010_src0_data;                                                                 // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                                // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [10:0] rsp_demux_010_src0_channel;                                                              // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                                        // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                                          // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_010_src1_valid;                                                                // rsp_demux_010:src1_valid -> rsp_mux_001:sink0_valid
	wire  [91:0] rsp_demux_010_src1_data;                                                                 // rsp_demux_010:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_010_src1_ready;                                                                // rsp_mux_001:sink0_ready -> rsp_demux_010:src1_ready
	wire  [10:0] rsp_demux_010_src1_channel;                                                              // rsp_demux_010:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_010_src1_startofpacket;                                                        // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_010_src1_endofpacket;                                                          // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire  [10:0] pipe_stage_host_ctrl_m0_limiter_cmd_valid_data;                                          // pipe_stage_host_ctrl_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         adc_adc_slave_agent_rdata_fifo_src_valid;                                                // ADC_adc_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] adc_adc_slave_agent_rdata_fifo_src_data;                                                 // ADC_adc_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         adc_adc_slave_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter:in_0_ready -> ADC_adc_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                           // avalon_st_adapter:out_0_valid -> ADC_adc_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                            // avalon_st_adapter:out_0_data -> ADC_adc_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                           // ADC_adc_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                           // avalon_st_adapter:out_0_error -> ADC_adc_slave_agent:rdata_fifo_sink_error
	wire         av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid;                             // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_src_data;                              // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_001:in_0_ready -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                       // avalon_st_adapter_001:out_0_valid -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                        // avalon_st_adapter_001:out_0_data -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                       // AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                       // avalon_st_adapter_001:out_0_error -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_valid;                        // D5M_Subsystem_avalon_d5m_config_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_data;                         // D5M_Subsystem_avalon_d5m_config_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_002:in_0_ready -> D5M_Subsystem_avalon_d5m_config_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                       // avalon_st_adapter_002:out_0_valid -> D5M_Subsystem_avalon_d5m_config_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                        // avalon_st_adapter_002:out_0_data -> D5M_Subsystem_avalon_d5m_config_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                       // D5M_Subsystem_avalon_d5m_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                       // avalon_st_adapter_002:out_0_error -> D5M_Subsystem_avalon_d5m_config_slave_agent:rdata_fifo_sink_error
	wire         acl_kernel_interface_ctrl_agent_rdata_fifo_src_valid;                                    // acl_kernel_interface_ctrl_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] acl_kernel_interface_ctrl_agent_rdata_fifo_src_data;                                     // acl_kernel_interface_ctrl_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         acl_kernel_interface_ctrl_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_003:in_0_ready -> acl_kernel_interface_ctrl_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                       // avalon_st_adapter_003:out_0_valid -> acl_kernel_interface_ctrl_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                        // avalon_st_adapter_003:out_0_data -> acl_kernel_interface_ctrl_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                       // acl_kernel_interface_ctrl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                       // avalon_st_adapter_003:out_0_error -> acl_kernel_interface_ctrl_agent:rdata_fifo_sink_error
	wire         vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid;                        // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data;                         // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_004:in_0_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                       // avalon_st_adapter_004:out_0_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                        // avalon_st_adapter_004:out_0_data -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                       // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                       // avalon_st_adapter_004:out_0_error -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_error
	wire         version_id_s_agent_rdata_fifo_src_valid;                                                 // version_id_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] version_id_s_agent_rdata_fifo_src_data;                                                  // version_id_s_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         version_id_s_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_005:in_0_ready -> version_id_s_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                       // avalon_st_adapter_005:out_0_valid -> version_id_s_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                        // avalon_st_adapter_005:out_0_data -> version_id_s_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                       // version_id_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                       // avalon_st_adapter_005:out_0_error -> version_id_s_agent:rdata_fifo_sink_error
	wire         led_s1_agent_rdata_fifo_src_valid;                                                       // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] led_s1_agent_rdata_fifo_src_data;                                                        // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         led_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_006:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                       // avalon_st_adapter_006:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                        // avalon_st_adapter_006:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                       // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                       // avalon_st_adapter_006:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire         pushbuttons_s1_agent_rdata_fifo_src_valid;                                               // Pushbuttons_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] pushbuttons_s1_agent_rdata_fifo_src_data;                                                // Pushbuttons_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         pushbuttons_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_007:in_0_ready -> Pushbuttons_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                       // avalon_st_adapter_007:out_0_valid -> Pushbuttons_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                        // avalon_st_adapter_007:out_0_data -> Pushbuttons_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                       // Pushbuttons_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                       // avalon_st_adapter_007:out_0_error -> Pushbuttons_s1_agent:rdata_fifo_sink_error
	wire         pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid;                             // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data;                              // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_008:in_0_ready -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                       // avalon_st_adapter_008:out_0_valid -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                        // avalon_st_adapter_008:out_0_data -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                       // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                       // avalon_st_adapter_008:out_0_error -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_error
	wire         video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid;                          // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data;                           // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_009:in_0_ready -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                       // avalon_st_adapter_009:out_0_valid -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                        // avalon_st_adapter_009:out_0_data -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                       // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                       // avalon_st_adapter_009:out_0_error -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_error
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_valid;                     // D5M_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_data;                      // D5M_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_ready;                     // avalon_st_adapter_010:in_0_ready -> D5M_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                                       // avalon_st_adapter_010:out_0_valid -> D5M_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                                        // avalon_st_adapter_010:out_0_data -> D5M_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                                       // D5M_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                                       // avalon_st_adapter_010:out_0_error -> D5M_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pipe_stage_host_ctrl_m0_translator (
		.clk                    (config_clk_out_clk_clk),                                                     //                       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pipe_stage_host_ctrl_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pipe_stage_host_ctrl_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (pipe_stage_host_ctrl_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (pipe_stage_host_ctrl_m0_byteenable),                                         //                          .byteenable
		.av_read                (pipe_stage_host_ctrl_m0_read),                                               //                          .read
		.av_readdata            (pipe_stage_host_ctrl_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (pipe_stage_host_ctrl_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pipe_stage_host_ctrl_m0_write),                                              //                          .write
		.av_writedata           (pipe_stage_host_ctrl_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (pipe_stage_host_ctrl_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (2),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) video_in_dma_addr_translation_master_translator (
		.clk                    (config_clk_out_clk_clk),                                                                  //                       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address            (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Video_In_DMA_Addr_Translation_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Video_In_DMA_Addr_Translation_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Video_In_DMA_Addr_Translation_master_byteenable),                                         //                          .byteenable
		.av_read                (Video_In_DMA_Addr_Translation_master_read),                                               //                          .read
		.av_readdata            (Video_In_DMA_Addr_Translation_master_readdata),                                           //                          .readdata
		.av_write               (Video_In_DMA_Addr_Translation_master_write),                                              //                          .write
		.av_writedata           (Video_In_DMA_Addr_Translation_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                                    //               (terminated)
		.uav_clken              (),                                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                                   //               (terminated)
		.av_response            (),                                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (2),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pixel_dma_addr_translation_master_translator (
		.clk                    (config_clk_out_clk_clk),                                                               //                       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Pixel_DMA_Addr_Translation_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Pixel_DMA_Addr_Translation_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Pixel_DMA_Addr_Translation_master_byteenable),                                         //                          .byteenable
		.av_read                (Pixel_DMA_Addr_Translation_master_read),                                               //                          .read
		.av_readdata            (Pixel_DMA_Addr_Translation_master_readdata),                                           //                          .readdata
		.av_write               (Pixel_DMA_Addr_Translation_master_write),                                              //                          .write
		.av_writedata           (Pixel_DMA_Addr_Translation_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_adc_slave_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_adc_slave_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (adc_adc_slave_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (adc_adc_slave_agent_m0_read),                            //                         .read
		.uav_write              (adc_adc_slave_agent_m0_write),                           //                         .write
		.uav_waitrequest        (adc_adc_slave_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (adc_adc_slave_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (adc_adc_slave_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (adc_adc_slave_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (adc_adc_slave_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (adc_adc_slave_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (adc_adc_slave_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (ADC_adc_slave_address),                                  //      avalon_anti_slave_0.address
		.av_write               (ADC_adc_slave_write),                                    //                         .write
		.av_read                (ADC_adc_slave_read),                                     //                         .read
		.av_readdata            (ADC_adc_slave_readdata),                                 //                         .readdata
		.av_writedata           (ADC_adc_slave_writedata),                                //                         .writedata
		.av_waitrequest         (ADC_adc_slave_waitrequest),                              //                         .waitrequest
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) av_config_avalon_av_config_slave_translator (
		.clk                    (config_clk_out_clk_clk),                                  //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (av_config_avalon_av_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (av_config_avalon_av_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (av_config_avalon_av_config_slave_agent_m0_read),          //                         .read
		.uav_write              (av_config_avalon_av_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (av_config_avalon_av_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (av_config_avalon_av_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (av_config_avalon_av_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (av_config_avalon_av_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (av_config_avalon_av_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (av_config_avalon_av_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (av_config_avalon_av_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (AV_Config_avalon_av_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (AV_Config_avalon_av_config_slave_write),                  //                         .write
		.av_read                (AV_Config_avalon_av_config_slave_read),                   //                         .read
		.av_readdata            (AV_Config_avalon_av_config_slave_readdata),               //                         .readdata
		.av_writedata           (AV_Config_avalon_av_config_slave_writedata),              //                         .writedata
		.av_byteenable          (AV_Config_avalon_av_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (AV_Config_avalon_av_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) d5m_subsystem_avalon_d5m_config_slave_translator (
		.clk                    (config_clk_out_clk_clk),                                       //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (d5m_subsystem_avalon_d5m_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (d5m_subsystem_avalon_d5m_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (d5m_subsystem_avalon_d5m_config_slave_agent_m0_read),          //                         .read
		.uav_write              (d5m_subsystem_avalon_d5m_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (d5m_subsystem_avalon_d5m_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (d5m_subsystem_avalon_d5m_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (d5m_subsystem_avalon_d5m_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (d5m_subsystem_avalon_d5m_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (d5m_subsystem_avalon_d5m_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (d5m_subsystem_avalon_d5m_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (d5m_subsystem_avalon_d5m_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (D5M_Subsystem_avalon_d5m_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (D5M_Subsystem_avalon_d5m_config_slave_write),                  //                         .write
		.av_read                (D5M_Subsystem_avalon_d5m_config_slave_read),                   //                         .read
		.av_readdata            (D5M_Subsystem_avalon_d5m_config_slave_readdata),               //                         .readdata
		.av_writedata           (D5M_Subsystem_avalon_d5m_config_slave_writedata),              //                         .writedata
		.av_byteenable          (D5M_Subsystem_avalon_d5m_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (D5M_Subsystem_avalon_d5m_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) acl_kernel_interface_ctrl_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (acl_kernel_interface_ctrl_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (acl_kernel_interface_ctrl_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (acl_kernel_interface_ctrl_agent_m0_read),                //                         .read
		.uav_write              (acl_kernel_interface_ctrl_agent_m0_write),               //                         .write
		.uav_waitrequest        (acl_kernel_interface_ctrl_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (acl_kernel_interface_ctrl_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (acl_kernel_interface_ctrl_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (acl_kernel_interface_ctrl_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (acl_kernel_interface_ctrl_agent_m0_writedata),           //                         .writedata
		.uav_lock               (acl_kernel_interface_ctrl_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (acl_kernel_interface_ctrl_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (acl_kernel_interface_ctrl_address),                      //      avalon_anti_slave_0.address
		.av_write               (acl_kernel_interface_ctrl_write),                        //                         .write
		.av_read                (acl_kernel_interface_ctrl_read),                         //                         .read
		.av_readdata            (acl_kernel_interface_ctrl_readdata),                     //                         .readdata
		.av_writedata           (acl_kernel_interface_ctrl_writedata),                    //                         .writedata
		.av_burstcount          (acl_kernel_interface_ctrl_burstcount),                   //                         .burstcount
		.av_byteenable          (acl_kernel_interface_ctrl_byteenable),                   //                         .byteenable
		.av_readdatavalid       (acl_kernel_interface_ctrl_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (acl_kernel_interface_ctrl_waitrequest),                  //                         .waitrequest
		.av_debugaccess         (acl_kernel_interface_ctrl_debugaccess),                  //                         .debugaccess
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_pixel_dma_control_slave_translator (
		.clk                    (config_clk_out_clk_clk),                                       //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (vga_subsystem_pixel_dma_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_pixel_dma_control_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_pixel_dma_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_pixel_dma_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_pixel_dma_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_pixel_dma_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGA_Subsystem_pixel_dma_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (VGA_Subsystem_pixel_dma_control_slave_write),                  //                         .write
		.av_read                (VGA_Subsystem_pixel_dma_control_slave_read),                   //                         .read
		.av_readdata            (VGA_Subsystem_pixel_dma_control_slave_readdata),               //                         .readdata
		.av_writedata           (VGA_Subsystem_pixel_dma_control_slave_writedata),              //                         .writedata
		.av_byteenable          (VGA_Subsystem_pixel_dma_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) version_id_s_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (version_id_s_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (version_id_s_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (version_id_s_agent_m0_read),                             //                         .read
		.uav_write              (version_id_s_agent_m0_write),                            //                         .write
		.uav_waitrequest        (version_id_s_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (version_id_s_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (version_id_s_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (version_id_s_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (version_id_s_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (version_id_s_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (version_id_s_agent_m0_debugaccess),                      //                         .debugaccess
		.av_read                (version_id_s_read),                                      //      avalon_anti_slave_0.read
		.av_readdata            (version_id_s_readdata),                                  //                         .readdata
		.av_address             (),                                                       //              (terminated)
		.av_write               (),                                                       //              (terminated)
		.av_writedata           (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                                   //                         .read
		.uav_write              (led_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (led_s1_address),                                         //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                                           //                         .write
		.av_readdata            (led_s1_readdata),                                        //                         .readdata
		.av_writedata           (led_s1_writedata),                                       //                         .writedata
		.av_chipselect          (led_s1_chipselect),                                      //                         .chipselect
		.av_read                (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_s1_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pushbuttons_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (pushbuttons_s1_agent_m0_read),                           //                         .read
		.uav_write              (pushbuttons_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (pushbuttons_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (pushbuttons_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (pushbuttons_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (pushbuttons_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (pushbuttons_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (pushbuttons_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (Pushbuttons_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (Pushbuttons_s1_write),                                   //                         .write
		.av_readdata            (Pushbuttons_s1_readdata),                                //                         .readdata
		.av_writedata           (Pushbuttons_s1_writedata),                               //                         .writedata
		.av_chipselect          (Pushbuttons_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_dma_addr_translation_slave_translator (
		.clk                    (config_clk_out_clk_clk),                                  //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (pixel_dma_addr_translation_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_dma_addr_translation_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_dma_addr_translation_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_dma_addr_translation_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_dma_addr_translation_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_dma_addr_translation_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_dma_addr_translation_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_dma_addr_translation_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_dma_addr_translation_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_dma_addr_translation_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_dma_addr_translation_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pixel_DMA_Addr_Translation_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pixel_DMA_Addr_Translation_slave_write),                  //                         .write
		.av_read                (Pixel_DMA_Addr_Translation_slave_read),                   //                         .read
		.av_readdata            (Pixel_DMA_Addr_Translation_slave_readdata),               //                         .readdata
		.av_writedata           (Pixel_DMA_Addr_Translation_slave_writedata),              //                         .writedata
		.av_byteenable          (Pixel_DMA_Addr_Translation_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Pixel_DMA_Addr_Translation_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_in_dma_addr_translation_slave_translator (
		.clk                    (config_clk_out_clk_clk),                                     //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (video_in_dma_addr_translation_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_in_dma_addr_translation_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_in_dma_addr_translation_slave_agent_m0_read),          //                         .read
		.uav_write              (video_in_dma_addr_translation_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_in_dma_addr_translation_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_in_dma_addr_translation_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_in_dma_addr_translation_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_in_dma_addr_translation_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_in_dma_addr_translation_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_in_dma_addr_translation_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_in_dma_addr_translation_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Video_In_DMA_Addr_Translation_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Video_In_DMA_Addr_Translation_slave_write),                  //                         .write
		.av_read                (Video_In_DMA_Addr_Translation_slave_read),                   //                         .read
		.av_readdata            (Video_In_DMA_Addr_Translation_slave_readdata),               //                         .readdata
		.av_writedata           (Video_In_DMA_Addr_Translation_slave_writedata),              //                         .writedata
		.av_byteenable          (Video_In_DMA_Addr_Translation_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Video_In_DMA_Addr_Translation_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) d5m_subsystem_video_in_dma_control_slave_translator (
		.clk                    (config_clk_out_clk_clk),                                          //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (d5m_subsystem_video_in_dma_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (d5m_subsystem_video_in_dma_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (d5m_subsystem_video_in_dma_control_slave_agent_m0_read),          //                         .read
		.uav_write              (d5m_subsystem_video_in_dma_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (d5m_subsystem_video_in_dma_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (d5m_subsystem_video_in_dma_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (d5m_subsystem_video_in_dma_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (d5m_subsystem_video_in_dma_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (d5m_subsystem_video_in_dma_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (d5m_subsystem_video_in_dma_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (d5m_subsystem_video_in_dma_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (D5M_Subsystem_video_in_dma_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (D5M_Subsystem_video_in_dma_control_slave_write),                  //                         .write
		.av_read                (D5M_Subsystem_video_in_dma_control_slave_read),                   //                         .read
		.av_readdata            (D5M_Subsystem_video_in_dma_control_slave_readdata),               //                         .readdata
		.av_writedata           (D5M_Subsystem_video_in_dma_control_slave_writedata),              //                         .writedata
		.av_byteenable          (D5M_Subsystem_video_in_dma_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (57),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pipe_stage_host_ctrl_m0_agent (
		.clk                   (config_clk_out_clk_clk),                                                     //       clk.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pipe_stage_host_ctrl_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pipe_stage_host_ctrl_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pipe_stage_host_ctrl_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pipe_stage_host_ctrl_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pipe_stage_host_ctrl_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (pipe_stage_host_ctrl_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (pipe_stage_host_ctrl_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (pipe_stage_host_ctrl_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (pipe_stage_host_ctrl_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (57),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) video_in_dma_addr_translation_master_agent (
		.clk                   (config_clk_out_clk_clk),                                                                  //       clk.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address            (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (video_in_dma_addr_translation_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (video_in_dma_addr_translation_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (video_in_dma_addr_translation_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (video_in_dma_addr_translation_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (video_in_dma_addr_translation_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                   //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                    //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                             //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                   //          .ready
		.av_response           (),                                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (57),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pixel_dma_addr_translation_master_agent (
		.clk                   (config_clk_out_clk_clk),                                                               //       clk.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pixel_dma_addr_translation_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pixel_dma_addr_translation_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pixel_dma_addr_translation_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pixel_dma_addr_translation_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pixel_dma_addr_translation_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                                //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                                 //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                              //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                          //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                                //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_adc_slave_agent (
		.clk                     (config_clk_out_clk_clk),                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (adc_adc_slave_agent_m0_address),                         //              m0.address
		.m0_burstcount           (adc_adc_slave_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (adc_adc_slave_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (adc_adc_slave_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (adc_adc_slave_agent_m0_lock),                            //                .lock
		.m0_readdata             (adc_adc_slave_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (adc_adc_slave_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (adc_adc_slave_agent_m0_read),                            //                .read
		.m0_waitrequest          (adc_adc_slave_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (adc_adc_slave_agent_m0_writedata),                       //                .writedata
		.m0_write                (adc_adc_slave_agent_m0_write),                           //                .write
		.rp_endofpacket          (adc_adc_slave_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (adc_adc_slave_agent_rp_ready),                           //                .ready
		.rp_valid                (adc_adc_slave_agent_rp_valid),                           //                .valid
		.rp_data                 (adc_adc_slave_agent_rp_data),                            //                .data
		.rp_startofpacket        (adc_adc_slave_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                    //                .channel
		.rf_sink_ready           (adc_adc_slave_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (adc_adc_slave_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (adc_adc_slave_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (adc_adc_slave_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (adc_adc_slave_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (adc_adc_slave_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (adc_adc_slave_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (adc_adc_slave_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (adc_adc_slave_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (adc_adc_slave_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (adc_adc_slave_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_adc_slave_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (adc_adc_slave_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_adc_slave_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_adc_slave_agent_rf_source_data),                     //        in.data
		.in_valid          (adc_adc_slave_agent_rf_source_valid),                    //          .valid
		.in_ready          (adc_adc_slave_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (adc_adc_slave_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (adc_adc_slave_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (adc_adc_slave_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (adc_adc_slave_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (adc_adc_slave_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (adc_adc_slave_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (adc_adc_slave_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) av_config_avalon_av_config_slave_agent (
		.clk                     (config_clk_out_clk_clk),                                            //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (av_config_avalon_av_config_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (av_config_avalon_av_config_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (av_config_avalon_av_config_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (av_config_avalon_av_config_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (av_config_avalon_av_config_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (av_config_avalon_av_config_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (av_config_avalon_av_config_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (av_config_avalon_av_config_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (av_config_avalon_av_config_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (av_config_avalon_av_config_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (av_config_avalon_av_config_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (av_config_avalon_av_config_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (av_config_avalon_av_config_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (av_config_avalon_av_config_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (av_config_avalon_av_config_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (av_config_avalon_av_config_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                           //                .channel
		.rf_sink_ready           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (av_config_avalon_av_config_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (av_config_avalon_av_config_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (av_config_avalon_av_config_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                            //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) d5m_subsystem_avalon_d5m_config_slave_agent (
		.clk                     (config_clk_out_clk_clk),                                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (d5m_subsystem_avalon_d5m_config_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (d5m_subsystem_avalon_d5m_config_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (d5m_subsystem_avalon_d5m_config_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (d5m_subsystem_avalon_d5m_config_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (d5m_subsystem_avalon_d5m_config_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (d5m_subsystem_avalon_d5m_config_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (d5m_subsystem_avalon_d5m_config_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (d5m_subsystem_avalon_d5m_config_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (d5m_subsystem_avalon_d5m_config_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (d5m_subsystem_avalon_d5m_config_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (d5m_subsystem_avalon_d5m_config_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (d5m_subsystem_avalon_d5m_config_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (d5m_subsystem_avalon_d5m_config_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (d5m_subsystem_avalon_d5m_config_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (d5m_subsystem_avalon_d5m_config_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (d5m_subsystem_avalon_d5m_config_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                //                .channel
		.rf_sink_ready           (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (d5m_subsystem_avalon_d5m_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (d5m_subsystem_avalon_d5m_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) acl_kernel_interface_ctrl_agent (
		.clk                     (config_clk_out_clk_clk),                                     //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (acl_kernel_interface_ctrl_agent_m0_address),                 //              m0.address
		.m0_burstcount           (acl_kernel_interface_ctrl_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (acl_kernel_interface_ctrl_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (acl_kernel_interface_ctrl_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (acl_kernel_interface_ctrl_agent_m0_lock),                    //                .lock
		.m0_readdata             (acl_kernel_interface_ctrl_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (acl_kernel_interface_ctrl_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (acl_kernel_interface_ctrl_agent_m0_read),                    //                .read
		.m0_waitrequest          (acl_kernel_interface_ctrl_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (acl_kernel_interface_ctrl_agent_m0_writedata),               //                .writedata
		.m0_write                (acl_kernel_interface_ctrl_agent_m0_write),                   //                .write
		.rp_endofpacket          (acl_kernel_interface_ctrl_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (acl_kernel_interface_ctrl_agent_rp_ready),                   //                .ready
		.rp_valid                (acl_kernel_interface_ctrl_agent_rp_valid),                   //                .valid
		.rp_data                 (acl_kernel_interface_ctrl_agent_rp_data),                    //                .data
		.rp_startofpacket        (acl_kernel_interface_ctrl_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                    //                .channel
		.rf_sink_ready           (acl_kernel_interface_ctrl_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (acl_kernel_interface_ctrl_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (acl_kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (acl_kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (acl_kernel_interface_ctrl_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (acl_kernel_interface_ctrl_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (acl_kernel_interface_ctrl_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (acl_kernel_interface_ctrl_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (acl_kernel_interface_ctrl_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (acl_kernel_interface_ctrl_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (acl_kernel_interface_ctrl_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (acl_kernel_interface_ctrl_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (acl_kernel_interface_ctrl_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) acl_kernel_interface_ctrl_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                     //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (acl_kernel_interface_ctrl_agent_rf_source_data),             //        in.data
		.in_valid          (acl_kernel_interface_ctrl_agent_rf_source_valid),            //          .valid
		.in_ready          (acl_kernel_interface_ctrl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (acl_kernel_interface_ctrl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (acl_kernel_interface_ctrl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (acl_kernel_interface_ctrl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (acl_kernel_interface_ctrl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (acl_kernel_interface_ctrl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (acl_kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (acl_kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_pixel_dma_control_slave_agent (
		.clk                     (config_clk_out_clk_clk),                                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (vga_subsystem_pixel_dma_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_subsystem_pixel_dma_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_subsystem_pixel_dma_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_subsystem_pixel_dma_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_subsystem_pixel_dma_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_subsystem_pixel_dma_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_subsystem_pixel_dma_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_subsystem_pixel_dma_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_subsystem_pixel_dma_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                                //                .channel
		.rf_sink_ready           (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (vga_subsystem_pixel_dma_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) version_id_s_agent (
		.clk                     (config_clk_out_clk_clk),                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (version_id_s_agent_m0_address),                          //              m0.address
		.m0_burstcount           (version_id_s_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (version_id_s_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (version_id_s_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (version_id_s_agent_m0_lock),                             //                .lock
		.m0_readdata             (version_id_s_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (version_id_s_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (version_id_s_agent_m0_read),                             //                .read
		.m0_waitrequest          (version_id_s_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (version_id_s_agent_m0_writedata),                        //                .writedata
		.m0_write                (version_id_s_agent_m0_write),                            //                .write
		.rp_endofpacket          (version_id_s_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (version_id_s_agent_rp_ready),                            //                .ready
		.rp_valid                (version_id_s_agent_rp_valid),                            //                .valid
		.rp_data                 (version_id_s_agent_rp_data),                             //                .data
		.rp_startofpacket        (version_id_s_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                //                .channel
		.rf_sink_ready           (version_id_s_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (version_id_s_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (version_id_s_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (version_id_s_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (version_id_s_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (version_id_s_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (version_id_s_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (version_id_s_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (version_id_s_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (version_id_s_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (version_id_s_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (version_id_s_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (version_id_s_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) version_id_s_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (version_id_s_agent_rf_source_data),                      //        in.data
		.in_valid          (version_id_s_agent_rf_source_valid),                     //          .valid
		.in_ready          (version_id_s_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (version_id_s_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (version_id_s_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (version_id_s_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (version_id_s_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (version_id_s_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (version_id_s_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (version_id_s_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (config_clk_out_clk_clk),                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (led_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (led_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_s1_agent (
		.clk                     (config_clk_out_clk_clk),                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pushbuttons_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (pushbuttons_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (pushbuttons_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (pushbuttons_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (pushbuttons_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (pushbuttons_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (pushbuttons_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (pushbuttons_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (pushbuttons_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (pushbuttons_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (pushbuttons_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (pushbuttons_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (pushbuttons_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (pushbuttons_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (pushbuttons_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (pushbuttons_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                //                .channel
		.rf_sink_ready           (pushbuttons_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (pushbuttons_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (pushbuttons_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (pushbuttons_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (pushbuttons_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (pushbuttons_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pushbuttons_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (pushbuttons_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (pushbuttons_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (pushbuttons_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (pushbuttons_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (pushbuttons_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (pushbuttons_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (pushbuttons_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (pushbuttons_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_dma_addr_translation_slave_agent (
		.clk                     (config_clk_out_clk_clk),                                            //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (pixel_dma_addr_translation_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pixel_dma_addr_translation_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pixel_dma_addr_translation_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pixel_dma_addr_translation_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pixel_dma_addr_translation_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pixel_dma_addr_translation_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pixel_dma_addr_translation_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pixel_dma_addr_translation_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pixel_dma_addr_translation_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pixel_dma_addr_translation_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pixel_dma_addr_translation_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pixel_dma_addr_translation_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pixel_dma_addr_translation_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pixel_dma_addr_translation_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pixel_dma_addr_translation_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pixel_dma_addr_translation_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                           //                .channel
		.rf_sink_ready           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pixel_dma_addr_translation_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pixel_dma_addr_translation_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pixel_dma_addr_translation_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                            //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_in_dma_addr_translation_slave_agent (
		.clk                     (config_clk_out_clk_clk),                                               //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (video_in_dma_addr_translation_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_in_dma_addr_translation_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_in_dma_addr_translation_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_in_dma_addr_translation_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_in_dma_addr_translation_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_in_dma_addr_translation_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_in_dma_addr_translation_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_in_dma_addr_translation_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_in_dma_addr_translation_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_in_dma_addr_translation_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_in_dma_addr_translation_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_in_dma_addr_translation_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_in_dma_addr_translation_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_in_dma_addr_translation_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_in_dma_addr_translation_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_in_dma_addr_translation_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                              //                .channel
		.rf_sink_ready           (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_in_dma_addr_translation_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_in_dma_addr_translation_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_in_dma_addr_translation_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_in_dma_addr_translation_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_in_dma_addr_translation_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_dma_addr_translation_slave_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                               //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (video_in_dma_addr_translation_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_in_dma_addr_translation_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_in_dma_addr_translation_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_in_dma_addr_translation_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_in_dma_addr_translation_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) d5m_subsystem_video_in_dma_control_slave_agent (
		.clk                     (config_clk_out_clk_clk),                                                    //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (d5m_subsystem_video_in_dma_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (d5m_subsystem_video_in_dma_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (d5m_subsystem_video_in_dma_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (d5m_subsystem_video_in_dma_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (d5m_subsystem_video_in_dma_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (d5m_subsystem_video_in_dma_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (d5m_subsystem_video_in_dma_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (d5m_subsystem_video_in_dma_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (d5m_subsystem_video_in_dma_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (d5m_subsystem_video_in_dma_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (d5m_subsystem_video_in_dma_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (d5m_subsystem_video_in_dma_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (d5m_subsystem_video_in_dma_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (d5m_subsystem_video_in_dma_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (d5m_subsystem_video_in_dma_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (d5m_subsystem_video_in_dma_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                                   //                .channel
		.rf_sink_ready           (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                                    //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (d5m_subsystem_video_in_dma_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (d5m_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	system_acl_iface_mm_interconnect_3_router router (
		.sink_ready         (pipe_stage_host_ctrl_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (pipe_stage_host_ctrl_m0_agent_cp_valid),                 //          .valid
		.sink_data          (pipe_stage_host_ctrl_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (pipe_stage_host_ctrl_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pipe_stage_host_ctrl_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (video_in_dma_addr_translation_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (video_in_dma_addr_translation_master_agent_cp_valid),         //          .valid
		.sink_data          (video_in_dma_addr_translation_master_agent_cp_data),          //          .data
		.sink_startofpacket (video_in_dma_addr_translation_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_in_dma_addr_translation_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                      //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_001_src_ready),                                        //       src.ready
		.src_valid          (router_001_src_valid),                                        //          .valid
		.src_data           (router_001_src_data),                                         //          .data
		.src_channel        (router_001_src_channel),                                      //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                   //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_002 router_002 (
		.sink_ready         (pixel_dma_addr_translation_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (pixel_dma_addr_translation_master_agent_cp_valid),         //          .valid
		.sink_data          (pixel_dma_addr_translation_master_agent_cp_data),          //          .data
		.sink_startofpacket (pixel_dma_addr_translation_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_dma_addr_translation_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                   //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_003 (
		.sink_ready         (adc_adc_slave_agent_rp_ready),                           //      sink.ready
		.sink_valid         (adc_adc_slave_agent_rp_valid),                           //          .valid
		.sink_data          (adc_adc_slave_agent_rp_data),                            //          .data
		.sink_startofpacket (adc_adc_slave_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (adc_adc_slave_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //       src.ready
		.src_valid          (router_003_src_valid),                                   //          .valid
		.src_data           (router_003_src_data),                                    //          .data
		.src_channel        (router_003_src_channel),                                 //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_004 (
		.sink_ready         (av_config_avalon_av_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (av_config_avalon_av_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (av_config_avalon_av_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (av_config_avalon_av_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (av_config_avalon_av_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                  //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_005 (
		.sink_ready         (d5m_subsystem_avalon_d5m_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (d5m_subsystem_avalon_d5m_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (d5m_subsystem_avalon_d5m_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (d5m_subsystem_avalon_d5m_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (d5m_subsystem_avalon_d5m_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                       //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_005_src_ready),                                         //       src.ready
		.src_valid          (router_005_src_valid),                                         //          .valid
		.src_data           (router_005_src_data),                                          //          .data
		.src_channel        (router_005_src_channel),                                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                    //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_006 (
		.sink_ready         (acl_kernel_interface_ctrl_agent_rp_ready),               //      sink.ready
		.sink_valid         (acl_kernel_interface_ctrl_agent_rp_valid),               //          .valid
		.sink_data          (acl_kernel_interface_ctrl_agent_rp_data),                //          .data
		.sink_startofpacket (acl_kernel_interface_ctrl_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (acl_kernel_interface_ctrl_agent_rp_endofpacket),         //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                   //       src.ready
		.src_valid          (router_006_src_valid),                                   //          .valid
		.src_data           (router_006_src_data),                                    //          .data
		.src_channel        (router_006_src_channel),                                 //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_007 router_007 (
		.sink_ready         (vga_subsystem_pixel_dma_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_pixel_dma_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_pixel_dma_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                       //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_007_src_ready),                                         //       src.ready
		.src_valid          (router_007_src_valid),                                         //          .valid
		.src_data           (router_007_src_data),                                          //          .data
		.src_channel        (router_007_src_channel),                                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                    //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_008 (
		.sink_ready         (version_id_s_agent_rp_ready),                            //      sink.ready
		.sink_valid         (version_id_s_agent_rp_valid),                            //          .valid
		.sink_data          (version_id_s_agent_rp_data),                             //          .data
		.sink_startofpacket (version_id_s_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (version_id_s_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                   //       src.ready
		.src_valid          (router_008_src_valid),                                   //          .valid
		.src_data           (router_008_src_data),                                    //          .data
		.src_channel        (router_008_src_channel),                                 //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_009 (
		.sink_ready         (led_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (led_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                   //       src.ready
		.src_valid          (router_009_src_valid),                                   //          .valid
		.src_data           (router_009_src_data),                                    //          .data
		.src_channel        (router_009_src_channel),                                 //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_010 (
		.sink_ready         (pushbuttons_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (pushbuttons_s1_agent_rp_valid),                          //          .valid
		.sink_data          (pushbuttons_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (pushbuttons_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (pushbuttons_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                   //       src.ready
		.src_valid          (router_010_src_valid),                                   //          .valid
		.src_data           (router_010_src_data),                                    //          .data
		.src_channel        (router_010_src_channel),                                 //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_011 (
		.sink_ready         (pixel_dma_addr_translation_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_dma_addr_translation_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_dma_addr_translation_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_dma_addr_translation_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_dma_addr_translation_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                  //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                                    //       src.ready
		.src_valid          (router_011_src_valid),                                    //          .valid
		.src_data           (router_011_src_data),                                     //          .data
		.src_channel        (router_011_src_channel),                                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                               //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_003 router_012 (
		.sink_ready         (video_in_dma_addr_translation_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_in_dma_addr_translation_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_in_dma_addr_translation_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_in_dma_addr_translation_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_in_dma_addr_translation_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                     //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_012_src_ready),                                       //       src.ready
		.src_valid          (router_012_src_valid),                                       //          .valid
		.src_data           (router_012_src_data),                                        //          .data
		.src_channel        (router_012_src_channel),                                     //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                  //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_013 router_013 (
		.sink_ready         (d5m_subsystem_video_in_dma_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (d5m_subsystem_video_in_dma_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (d5m_subsystem_video_in_dma_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (d5m_subsystem_video_in_dma_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (d5m_subsystem_video_in_dma_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                          //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_013_src_ready),                                            //       src.ready
		.src_valid          (router_013_src_valid),                                            //          .valid
		.src_data           (router_013_src_data),                                             //          .data
		.src_channel        (router_013_src_channel),                                          //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pipe_stage_host_ctrl_m0_limiter (
		.clk                    (config_clk_out_clk_clk),                                 //       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (pipe_stage_host_ctrl_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (pipe_stage_host_ctrl_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (pipe_stage_host_ctrl_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (pipe_stage_host_ctrl_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (pipe_stage_host_ctrl_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (pipe_stage_host_ctrl_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (pipe_stage_host_ctrl_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (pipe_stage_host_ctrl_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	system_acl_iface_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                 (config_clk_out_clk_clk),                                 //        clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (pipe_stage_host_ctrl_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel        (pipe_stage_host_ctrl_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data           (pipe_stage_host_ctrl_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket  (pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket    (pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid          (pipe_stage_host_ctrl_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                   //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                   //           .valid
		.src0_data           (cmd_demux_src0_data),                                    //           .data
		.src0_channel        (cmd_demux_src0_channel),                                 //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                             //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                   //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                   //           .valid
		.src1_data           (cmd_demux_src1_data),                                    //           .data
		.src1_channel        (cmd_demux_src1_channel),                                 //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                             //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                   //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                   //           .valid
		.src2_data           (cmd_demux_src2_data),                                    //           .data
		.src2_channel        (cmd_demux_src2_channel),                                 //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                             //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                   //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                   //           .valid
		.src3_data           (cmd_demux_src3_data),                                    //           .data
		.src3_channel        (cmd_demux_src3_channel),                                 //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                             //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                   //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                   //           .valid
		.src4_data           (cmd_demux_src4_data),                                    //           .data
		.src4_channel        (cmd_demux_src4_channel),                                 //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                             //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                   //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                   //           .valid
		.src5_data           (cmd_demux_src5_data),                                    //           .data
		.src5_channel        (cmd_demux_src5_channel),                                 //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                           //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                             //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                   //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                   //           .valid
		.src6_data           (cmd_demux_src6_data),                                    //           .data
		.src6_channel        (cmd_demux_src6_channel),                                 //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                           //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                             //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                   //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                   //           .valid
		.src7_data           (cmd_demux_src7_data),                                    //           .data
		.src7_channel        (cmd_demux_src7_channel),                                 //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                           //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                             //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                   //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                   //           .valid
		.src8_data           (cmd_demux_src8_data),                                    //           .data
		.src8_channel        (cmd_demux_src8_channel),                                 //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                           //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                             //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                   //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                   //           .valid
		.src9_data           (cmd_demux_src9_data),                                    //           .data
		.src9_channel        (cmd_demux_src9_channel),                                 //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                           //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                             //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                  //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                  //           .valid
		.src10_data          (cmd_demux_src10_data),                                   //           .data
		.src10_channel       (cmd_demux_src10_channel),                                //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                          //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket)                             //           .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 cmd_demux_001 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                   //      sink.ready
		.sink_channel       (router_001_src_channel),                                 //          .channel
		.sink_data          (router_001_src_data),                                    //          .data
		.sink_startofpacket (router_001_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_001_src_valid),                                   //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                               //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                               //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                             //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 cmd_demux_002 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                   //      sink.ready
		.sink_channel       (router_002_src_channel),                                 //          .channel
		.sink_data          (router_002_src_data),                                    //          .data
		.sink_startofpacket (router_002_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_002_src_valid),                                   //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                               //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                               //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                             //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_src_valid),                                      //          .valid
		.src_data            (cmd_mux_src_data),                                       //          .data
		.src_channel         (cmd_mux_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src0_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_001 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                  //          .valid
		.src_data            (cmd_mux_001_src_data),                                   //          .data
		.src_channel         (cmd_mux_001_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src1_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_002 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                  //          .valid
		.src_data            (cmd_mux_002_src_data),                                   //          .data
		.src_channel         (cmd_mux_002_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src2_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_003 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                  //          .valid
		.src_data            (cmd_mux_003_src_data),                                   //          .data
		.src_channel         (cmd_mux_003_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src3_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux_004 cmd_mux_004 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                  //          .valid
		.src_data            (cmd_mux_004_src_data),                                   //          .data
		.src_channel         (cmd_mux_004_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src4_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                             //          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                               //     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                               //          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),                             //          .channel
		.sink1_data          (cmd_demux_002_src0_data),                                //          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_005 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                  //          .valid
		.src_data            (cmd_mux_005_src_data),                                   //          .data
		.src_channel         (cmd_mux_005_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src5_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_006 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                  //          .valid
		.src_data            (cmd_mux_006_src_data),                                   //          .data
		.src_channel         (cmd_mux_006_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src6_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_007 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                  //          .valid
		.src_data            (cmd_mux_007_src_data),                                   //          .data
		.src_channel         (cmd_mux_007_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src7_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_008 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                  //          .valid
		.src_data            (cmd_mux_008_src_data),                                   //          .data
		.src_channel         (cmd_mux_008_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src8_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_009 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                  //          .valid
		.src_data            (cmd_mux_009_src_data),                                   //          .data
		.src_channel         (cmd_mux_009_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src9_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux_004 cmd_mux_010 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                  //          .valid
		.src_data            (cmd_mux_010_src_data),                                   //          .data
		.src_channel         (cmd_mux_010_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                //          .channel
		.sink0_data          (cmd_demux_src10_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                               //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                             //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                   //      sink.ready
		.sink_channel       (router_003_src_channel),                                 //          .channel
		.sink_data          (router_003_src_data),                                    //          .data
		.sink_startofpacket (router_003_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_003_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux_001 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                   //      sink.ready
		.sink_channel       (router_004_src_channel),                                 //          .channel
		.sink_data          (router_004_src_data),                                    //          .data
		.sink_startofpacket (router_004_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_004_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux_002 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                   //      sink.ready
		.sink_channel       (router_005_src_channel),                                 //          .channel
		.sink_data          (router_005_src_data),                                    //          .data
		.sink_startofpacket (router_005_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_005_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux_003 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                   //      sink.ready
		.sink_channel       (router_006_src_channel),                                 //          .channel
		.sink_data          (router_006_src_data),                                    //          .data
		.sink_startofpacket (router_006_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_006_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux_004 rsp_demux_004 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                   //      sink.ready
		.sink_channel       (router_007_src_channel),                                 //          .channel
		.sink_data          (router_007_src_data),                                    //          .data
		.sink_startofpacket (router_007_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_007_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                         //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                               //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                               //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                             //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux_005 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                   //      sink.ready
		.sink_channel       (router_008_src_channel),                                 //          .channel
		.sink_data          (router_008_src_data),                                    //          .data
		.sink_startofpacket (router_008_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_008_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux_006 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                   //      sink.ready
		.sink_channel       (router_009_src_channel),                                 //          .channel
		.sink_data          (router_009_src_data),                                    //          .data
		.sink_startofpacket (router_009_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_009_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux_007 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                   //      sink.ready
		.sink_channel       (router_010_src_channel),                                 //          .channel
		.sink_data          (router_010_src_data),                                    //          .data
		.sink_startofpacket (router_010_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_010_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux_008 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                   //      sink.ready
		.sink_channel       (router_011_src_channel),                                 //          .channel
		.sink_data          (router_011_src_data),                                    //          .data
		.sink_startofpacket (router_011_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_011_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux_001 rsp_demux_009 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                   //      sink.ready
		.sink_channel       (router_012_src_channel),                                 //          .channel
		.sink_data          (router_012_src_data),                                    //          .data
		.sink_startofpacket (router_012_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_012_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux_004 rsp_demux_010 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                   //      sink.ready
		.sink_channel       (router_013_src_channel),                                 //          .channel
		.sink_data          (router_013_src_data),                                    //          .data
		.sink_startofpacket (router_013_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_013_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                         //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                               //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                               //          .valid
		.src1_data          (rsp_demux_010_src1_data),                                //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                             //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                  (config_clk_out_clk_clk),                                 //       clk.clk
		.reset                (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                      //       src.ready
		.src_valid            (rsp_mux_src_valid),                                      //          .valid
		.src_data             (rsp_mux_src_data),                                       //          .data
		.src_channel          (rsp_mux_src_channel),                                    //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                   //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                   //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                 //          .channel
		.sink0_data           (rsp_demux_src0_data),                                    //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                           //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                             //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                               //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                               //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                             //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                         //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                               //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                               //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                             //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                       //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                         //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                               //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                               //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                             //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                       //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                         //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                               //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                               //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                             //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                       //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                         //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                               //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                               //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                             //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                       //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                         //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                               //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                               //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                             //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                       //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                         //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                               //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                               //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                             //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                       //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                         //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                               //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                               //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                             //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                       //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                         //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                               //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                               //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                             //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                       //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                         //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                               //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                               //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                             //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                       //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_mux_001 rsp_mux_001 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                  //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                  //          .valid
		.src_data            (rsp_mux_001_src_data),                                   //          .data
		.src_channel         (rsp_mux_001_src_channel),                                //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (rsp_demux_010_src1_ready),                               //     sink0.ready
		.sink0_valid         (rsp_demux_010_src1_valid),                               //          .valid
		.sink0_channel       (rsp_demux_010_src1_channel),                             //          .channel
		.sink0_data          (rsp_demux_010_src1_data),                                //          .data
		.sink0_startofpacket (rsp_demux_010_src1_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (rsp_demux_010_src1_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_mux_001 rsp_mux_002 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                  //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                  //          .valid
		.src_data            (rsp_mux_002_src_data),                                   //          .data
		.src_channel         (rsp_mux_002_src_channel),                                //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (rsp_demux_004_src1_ready),                               //     sink0.ready
		.sink0_valid         (rsp_demux_004_src1_valid),                               //          .valid
		.sink0_channel       (rsp_demux_004_src1_channel),                             //          .channel
		.sink0_data          (rsp_demux_004_src1_data),                                //          .data
		.sink0_startofpacket (rsp_demux_004_src1_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src1_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_adc_slave_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (adc_adc_slave_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (adc_adc_slave_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (d5m_subsystem_avalon_d5m_config_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                 //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (acl_kernel_interface_ctrl_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (acl_kernel_interface_ctrl_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (acl_kernel_interface_ctrl_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                       //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                 //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (version_id_s_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (version_id_s_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (version_id_s_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                       //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                       //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pushbuttons_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (pushbuttons_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (pushbuttons_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                       //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                            //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                               //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (d5m_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                                    //         .error
	);

endmodule
